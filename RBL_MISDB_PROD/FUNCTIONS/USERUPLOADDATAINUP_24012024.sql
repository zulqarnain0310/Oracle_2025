--------------------------------------------------------
--  DDL for Function USERUPLOADDATAINUP_24012024
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "RBL_MISDB_PROD"."USERUPLOADDATAINUP_24012024" 
--USE YES_MISDB

(
  iv_Timekey IN NUMBER,
  v_XmlData IN CLOB DEFAULT ' ' ,
  v_LoginPassword IN VARCHAR2 DEFAULT ' ' ,
  v_UserLoginID IN VARCHAR2,
  v_OperationFlag IN NUMBER,
  v_MenuId IN NUMBER,
  v_AuthMode IN CHAR,
  v_filepath IN VARCHAR2,
  iv_EffectiveFromTimeKey IN NUMBER,
  iv_EffectiveToTimeKey IN NUMBER,
  v_Result OUT NUMBER/* DEFAULT 0*/,
  v_UniqueUploadID IN NUMBER
)
RETURN NUMBER
AS
   v_Timekey NUMBER(10,0) := iv_Timekey;
   v_EffectiveFromTimeKey NUMBER(10,0) := iv_EffectiveFromTimeKey;
   v_EffectiveToTimeKey NUMBER(10,0) := iv_EffectiveToTimeKey;
   v_temp NUMBER(1, 0) := 0;
   --AND UniqueUploadID=@UniqueUploadID
   --AND UploadType='User Upload'
   v_cursor SYS_REFCURSOR;
--@Authlevel varchar(5)
--DECLARE @Timekey INT=24928,
--	@UserLoginID VARCHAR(100)='FNAOPERATOR',
--	@OperationFlag INT=1,
--	@MenuId INT=163,
--	@AuthMode	CHAR(1)='N',
--	@filepath VARCHAR(MAX)='',
--	@EffectiveFromTimeKey INT=24928,
--	@EffectiveToTimeKey	INT=49999,
--    @Result		INT=0 ,
--	@UniqueUploadID INT=41

BEGIN

   /*TODO:SQLDEV*/ SET DATEFORMAT DMY /*END:SQLDEV*/
   BEGIN
      SELECT 1 INTO v_temp
        FROM DUAL
       WHERE EXISTS ( SELECT 1 
                      FROM ACLProcessInProgressStatus 
                       WHERE  STATUS = 'RUNNING'
                                AND StatusFlag = 'N'
                                AND TimeKey IN ( SELECT MAX(Timekey)  
                                                 FROM ACLProcessInProgressStatus  )
    );
   EXCEPTION
      WHEN OTHERS THEN
         NULL;
   END;

   IF v_temp = 1 THEN

   BEGIN
      DBMS_OUTPUT.PUT_LINE('ACL Process is In Progress');

   END;

   --IF EXISTS(SELECT 1 FROM ACLProcessInProgressStatus WHERE Status='COMPLETED' AND StatusFlag='Y' AND TimeKey in (select max(Timekey) from ACLProcessInProgressStatus) )

   --BEGIN

   --	PRINT 'ACL Process Completed'
   ELSE
   DECLARE
      v_CollIDAutoGenerated NUMBER(10,0);
      v_CollateralID VARCHAR2(30) := ' ';
      v_Year NUMBER(10,0);
      v_FromDate VARCHAR2(10);
      v_ToDate VARCHAR2(10);
      v_FilePathUpload VARCHAR2(100);

   BEGIN
      --DECLARE @Timekey INT
      --SET @Timekey=(SELECT MAX(TIMEKEY) FROM dbo.SysProcessingCycle
      --	WHERE ProcessType='Quarterly')
      SELECT UTILS.CONVERT_TO_NUMBER(B.timekey,10,0) 

        INTO v_Timekey
        FROM SysDataMatrix A
               JOIN SysDayMatrix B   ON A.TimeKey = B.TimeKey
       WHERE  A.CurrentStatus = 'C';
      DBMS_OUTPUT.PUT_LINE(v_TIMEKEY);
      v_EffectiveFromTimeKey := v_TimeKey ;
      v_EffectiveToTimeKey := 49999 ;
      v_Year := utils.datepart('YEAR', SYSDATE) ;
      v_FromDate := UTILS.CONVERT_TO_VARCHAR2((v_Year - 1),4) || '-04-01' ;
      v_ToDate := UTILS.CONVERT_TO_VARCHAR2((v_Year),4) || '-03-31' ;
      v_FilePathUpload := v_UserLoginId || '_' || v_filepath ;
      DBMS_OUTPUT.PUT_LINE('@FilePathUpload');
      DBMS_OUTPUT.PUT_LINE(v_FilePathUpload);
      BEGIN

         BEGIN
            --BEGIN TRAN
            IF ( v_MenuId = 58 ) THEN

            BEGIN
               --Set @FilePathUpload='mismaker_CollateralUpload_3.xlsx'
               IF ( v_OperationFlag = 1 ) THEN
                DECLARE
                  v_temp NUMBER(1, 0) := 0;

               BEGIN
                  IF utils.object_id('TEMPDB..tt_UserMasterUploadData_5') IS NOT NULL THEN
                   EXECUTE IMMEDIATE ' TRUNCATE TABLE tt_UserMasterUploadData_5 ';
                  END IF;
                  --Select * from DimUserInfo
                  DELETE FROM tt_UserMasterUploadData_5;
                  UTILS.IDENTITY_RESET('tt_UserMasterUploadData_5');

                  INSERT INTO tt_UserMasterUploadData_5 ( 
                  	SELECT /*TODO:SQLDEV*/ c.value('./SrNo[1]','int') /*END:SQLDEV*/ SrNo  ,
                          /*TODO:SQLDEV*/ c.value('./UserID[1]','varchar(max)') /*END:SQLDEV*/ UserID  ,
                          /*TODO:SQLDEV*/ c.value('./UserName[1]','varchar(max)') /*END:SQLDEV*/ UserName  ,
                          /*TODO:SQLDEV*/ c.value('./UserRole[1]','varchar(max)') /*END:SQLDEV*/ UserRole  ,
                          /*TODO:SQLDEV*/ c.value('./Designation[1]','varchar(max)') /*END:SQLDEV*/ Designation  ,
                          /*TODO:SQLDEV*/ c.value('./UserDepartment[1]','nvarchar(510)') /*END:SQLDEV*/ UserDepartment  ,
                          --,c.value('./ApplicableSolID[1]','varchar(max)')ApplicableSolID
                          --,c.value('./ApplicableBACID[1]','varchar(max)')ApplicableBACID
                          /*TODO:SQLDEV*/ c.value('./UserEmailId[1]','varchar(max)') /*END:SQLDEV*/ UserEmailId  ,
                          /*TODO:SQLDEV*/ c.value('./UserMobileNumber[1]','varchar(max)') /*END:SQLDEV*/ UserMobileNumber  ,
                          /*TODO:SQLDEV*/ c.value('./UserExtensionNumber [1]','varchar(max)') /*END:SQLDEV*/ UserExtensionNumber  ,
                          /*TODO:SQLDEV*/ c.value('./IsCheckerYN[1]','varchar(max)') /*END:SQLDEV*/ IsChecker  ,
                          /*TODO:SQLDEV*/ c.value('./IsChecker2YN[1]','varchar(max)') /*END:SQLDEV*/ IsChecker2 ,---Added By Sachin

                          /*TODO:SQLDEV*/ c.value('./IsActiveYN [1]','varchar(max)') /*END:SQLDEV*/ IsActive  ,
                          /*TODO:SQLDEV*/ c.value('./ActionAU[1]','varchar(max)') /*END:SQLDEV*/ Perform  
                  	  FROM TABLE(/*TODO:SQLDEV*/ @XmlData.nodes('/DataSet/GridData') AS t(c) /*END:SQLDEV*/)  );
                  INSERT INTO UserDetail_stg
                    ( SrNo, UserID, UserName, UserRole, Designation, UserDepartment, UserEmailId, UserMobileNumber
                  --UserExtensionNumber,
                  , UserExtensionNumbar, IsChecker, IsChecker2, IsActive, sheetname, ActionAU )
                    ( SELECT SrNo ,
                             UserID ,
                             UserName ,
                             UserRole ,
                             Designation ,
                             UserDepartment ,
                             UserEmailId ,
                             UserMobileNumber ,
                             UserExtensionNumber ,
                             IsChecker ,
                             IsChecker2 ,
                             IsActive ,
                             v_FilePathUpload ,
                             Perform 
                      FROM tt_UserMasterUploadData_5  );
                  BEGIN
                     SELECT 1 INTO v_temp
                       FROM DUAL
                      WHERE NOT ( EXISTS ( SELECT 1 
                                           FROM UserDetail_stg 
                                            WHERE  sheetname = v_FilePathUpload ) );
                  EXCEPTION
                     WHEN OTHERS THEN
                        NULL;
                  END;

                  IF v_temp = 1 THEN

                  BEGIN
                     --Rollback tran
                     v_Result := -8 ;
                     RETURN v_Result;

                  END;
                  END IF;
                  DBMS_OUTPUT.PUT_LINE('Sachin');
                  BEGIN
                     SELECT 1 INTO v_temp
                       FROM DUAL
                      WHERE EXISTS ( SELECT 1 
                                     FROM UserDetail_stg 
                                      WHERE  sheetname = v_FilePathUpload );
                  EXCEPTION
                     WHEN OTHERS THEN
                        NULL;
                  END;

                  IF v_temp = 1 THEN
                   DECLARE
                     --sp
                     v_ExcelUploadId NUMBER(10,0);

                  BEGIN
                     INSERT INTO ExcelUploadHistory
                       ( UploadedBy, DateofUpload, AuthorisationStatus
                     --,Action	
                     , UploadType, EffectiveFromTimeKey, EffectiveToTimeKey, CreatedBy, DateCreated )
                       ( SELECT v_UserLoginID ,
                                SYSDATE ,
                                'NP' ,
                                --,'NP'
                                'User Upload' ,
                                v_EffectiveFromTimeKey ,
                                v_EffectiveToTimeKey ,
                                v_UserLoginID ,
                                SYSDATE 
                           FROM DUAL  );
                     DBMS_OUTPUT.PUT_LINE(SQL%ROWCOUNT);
                     SELECT MAX(UniqueUploadID)  

                       INTO v_ExcelUploadId
                       FROM ExcelUploadHistory ;
                     INSERT INTO UploadStatus
                       ( FileNames, UploadedBy, UploadDateTime, UploadType )
                       VALUES ( v_filepath, v_UserLoginID, TO_DATE(SYSDATE,'dd/mm/yyyy'), 'User Upload' );
                     /*TODO:SQLDEV*/ SET dateformat DMY /*END:SQLDEV*/
                     --		Declare @LoginPassword Varchar(Max)
                     --		Select @LoginPassword=ParameterValue from syssolutionParameter
                     --where ParameterName ='DefaultPassword'
                     --select * from DimUserInfo_Mod 
                     INSERT INTO DimUserInfo_mod
                       ( UploadID, UserLoginID, LoginPassword, UserName, UserRoleAlt_Key, DeptGroupCode, MobileNo, Email_ID, Extension, IsChecker, IsChecker2, Activate, CreatedBy, DateCreated, AuthorisationStatus, EffectiveFromTimeKey, EffectiveToTimeKey, ScreenFlag, PasswordChanged, UserLocation, SuspendedUser, EmployeeID, IsEmployee, DepartmentId, ActionAU, Designation, DesignationAlt_Key )
                       ( SELECT v_ExcelUploadId ,
                                UserID ,
                                v_LoginPassword ,
                                UserName ,
                                B.UserRoleAlt_Key ,
                                C.DeptGroupId ,
                                UserMobileNumber ,
                                UserEmailId ,
                                --UserExtensionNumber,
                                UserExtensionNumbar ,
                                IsChecker ,
                                IsChecker2 ,
                                IsActive ,
                                v_UserLoginID ,
                                SYSDATE ,
                                'NP' ,
                                v_Timekey ,
                                49999 ,
                                'U' ,
                                'Y' ,
                                'HO' ,
                                'N' ,
                                UserID ,
                                1 ,
                                C.DeptGroupId ,
                                A.ActionAU ,
                                A.Designation ,
                                Dp.ParameterAlt_Key 
                         FROM UserDetail_stg A
                                LEFT JOIN DimUserRole B   ON A.UserRole = B.RoleDescription
                                AND B.EffectiveFromTimeKey <= v_Timekey
                                AND B.EffectiveToTimeKey >= v_Timekey
                                LEFT JOIN DimUserDeptGroup C   ON A.UserDepartment = C.DeptGroupCode
                                AND C.EffectiveFromTimeKey <= v_Timekey
                                AND C.EffectiveToTimeKey >= v_Timekey
                                LEFT JOIN ( SELECT ParameterAlt_Key ,
                                                   ParameterName 
                                            FROM DimParameter 
                                             WHERE  DimParameterName = 'DimUserDesignation' ) DP   ON A.Designation = DP.ParameterName
                          WHERE  sheetname = v_FilePathUpload );
                     ---DELETE FROM STAGING DATA Sachin
                     DELETE UserDetail_stg

                      WHERE  sheetname = v_FilePathUpload;

                  END;
                  END IF;

               END;
               END IF;
               --RETURN @ExcelUploadId
               --------------------------------------------
               IF ( v_OperationFlag = 16 ) THEN

                ----AUTHORIZE
               BEGIN
                  DBMS_OUTPUT.PUT_LINE('SACHINTEST111 ');
                  UPDATE DimUserInfo_mod
                     SET AuthorisationStatus = '1A',
                         ApprovedByFirstLevel = v_UserLoginID,
                         DateApprovedFirstLevel = SYSDATE
                   WHERE  UploadId = v_UniqueUploadID;
                  UPDATE ExcelUploadHistory
                     SET AuthorisationStatus = '1A',
                         ApprovedByFirstLevel = v_UserLoginID,
                         DateApprovedFirstLevel = SYSDATE
                   WHERE  UniqueUploadID = v_UniqueUploadID
                    AND UploadType = 'User Upload';

               END;
               END IF;
               IF ( v_OperationFlag = 20 ) THEN

                ----AUTHORIZE
               BEGIN
                  UPDATE DimUserInfo_mod
                     SET AuthorisationStatus = 'A',
                         ApprovedBy = v_UserLoginID,
                         DateApproved = SYSDATE
                   WHERE  UploadId = v_UniqueUploadID;
                  /*TODO:SQLDEV*/ SET dateformat DMY /*END:SQLDEV*/
                  --UPDATE 
                  --[DimUserInfo_Mod] 
                  --SET 
                  --AuthorisationStatus	='A'
                  --,ApprovedBy	=@UserLoginID
                  --,DateApproved	=GETDATE()
                  --WHERE UploadId=@UniqueUploadID
                  --Update  A
                  --Set A.EffectiveToTimeKey=A.EffectiveFromTimeKey-1
                  --from [CollateralDetailUpload] A
                  --inner join [DimUserInfo_Mod] B
                  --ON A.AccountID=B.AccountID
                  --AND B.EffectiveFromTimeKey <=@Timekey
                  --AND B.EffectiveToTimeKey >=@Timekey
                  --Where B.UploadId=@UniqueUploadID
                  --AND A.EffectiveToTimeKey >=49999
                  INSERT INTO DimUserInfo
                    ( UserLoginID, UserName, LoginPassword, UserRoleAlt_Key, DeptGroupCode, MobileNo, Email_ID, Extension, IsChecker, IsChecker2, Activate, AuthorisationStatus, EffectiveFromTimeKey, EffectiveToTimeKey, CreatedBy, DateCreated, ModifyBy, DateModified, ApprovedBy, DateApproved, ScreenFlag, PasswordChanged, UserLocation, SuspendedUser, EmployeeID, IsEmployee, DepartmentId, Designation, DesignationAlt_Key )
                    ( SELECT UserLoginID ,
                             UserName ,
                             LoginPassword ,
                             UserRoleAlt_Key ,
                             DeptGroupCode ,
                             MobileNo ,
                             Email_ID ,
                             Extension ,
                             IsChecker ,
                             IsChecker2 ,
                             Activate ,
                             A.AuthorisationStatus ,
                             v_Timekey ,
                             49999 ,
                             A.CreatedBy ,
                             A.DateCreated ,
                             A.ModifyBy ,
                             A.DateModified ,
                             v_UserLoginID ,
                             SYSDATE ,
                             ScreenFlag ,
                             'Y' ,
                             UserLocation ,
                             SuspendedUser ,
                             EmployeeID ,
                             IsEmployee ,
                             DepartmentId ,
                             Designation ,
                             DesignationAlt_Key 
                      FROM DimUserInfo_mod A
                       WHERE  A.UploadID = v_UniqueUploadID
                                AND A.EffectiveToTimeKey >= v_Timekey
                                AND A.ActionAU = 'A' );
                  MERGE INTO A 
                  USING (SELECT A.ROWID row_id, B.UserName, v_LoginPassword, B.UserRoleAlt_Key, B.DeptGroupCode, B.MobileNo, B.Email_ID, B.Extension, B.IsChecker, B.IsChecker2, B.Activate, B.AuthorisationStatus, B.CreatedBy, B.DateCreated, B.ModifyBy, B.DateModified, v_UserLoginID, SYSDATE, B.ScreenFlag, 'Y', B.UserLocation, B.SuspendedUser, B.EmployeeID, B.IsEmployee, B.DepartmentId, B.Designation
                  FROM A ,DimUserInfo A
                         JOIN DimUserInfo_mod B   ON A.UserLoginID = B.UserLoginID 
                   WHERE B.UploadID = v_UniqueUploadID
                    AND B.EffectiveToTimeKey >= v_Timekey
                    AND B.ActionAU = 'U') src
                  ON ( A.ROWID = src.row_id )
                  WHEN MATCHED THEN UPDATE SET A.UserName = src.UserName,
                                               A.LoginPassword = v_LoginPassword,
                                               A.UserRoleAlt_Key = src.UserRoleAlt_Key,
                                               A.DeptGroupCode = src.DeptGroupCode,
                                               A.MobileNo = src.MobileNo,
                                               A.Email_ID = src.Email_ID,
                                               A.Extension = src.Extension,
                                               A.IsChecker = src.IsChecker,
                                               A.IsChecker2 = src.IsChecker2,
                                               A.Activate = src.Activate,
                                               A.AuthorisationStatus = src.AuthorisationStatus,
                                               A.CreatedBy = src.CreatedBy,
                                               A.DateCreated = src.DateCreated,
                                               A.ModifyBy = src.ModifyBy,
                                               A.DateModified = src.DateModified,
                                               A.ApprovedBy = v_UserLoginID,
                                               A.DateApproved = SYSDATE,
                                               A.ScreenFlag = src.ScreenFlag,
                                               A.PasswordChanged = 'Y',
                                               A.UserLocation = src.UserLocation,
                                               A.SuspendedUser = src.SuspendedUser,
                                               A.EmployeeID = src.EmployeeID,
                                               A.IsEmployee = src.IsEmployee,
                                               A.DepartmentId = src.DepartmentId,
                                               A.Designation = src.Designation;
                  UPDATE ExcelUploadHistory
                     SET AuthorisationStatus = 'A',
                         ApprovedBy = v_UserLoginID,
                         DateApproved = SYSDATE
                   WHERE  EffectiveFromTimeKey <= v_Timekey
                    AND EffectiveToTimeKey >= v_Timekey
                    AND UniqueUploadID = v_UniqueUploadID
                    AND UploadType = 'User Upload';

               END;
               END IF;
               IF ( v_OperationFlag = 17 ) THEN

                ----REJECT
               BEGIN
                  --UPDATE 
                  --	[DimUserInfo_Mod] 
                  --	SET 
                  --	AuthorisationStatus	='R'
                  --	,ApprovedBy	=@UserLoginID
                  --	,DateApproved	=GETDATE()
                  --	WHERE UploadId=@UniqueUploadID
                  --	AND AuthorisationStatus='NP'
                  UPDATE DimUserInfo_mod
                     SET AuthorisationStatus = 'R',
                         ApprovedBy = v_UserLoginID,
                         DateApproved = SYSDATE,
                         EffectiveToTimeKey = EffectiveFromTimeKey - 1
                   WHERE  UploadId = v_UniqueUploadID
                    AND AuthorisationStatus = 'NP';
                  ----SELECT * FROM IBPCPoolDetail
                  UPDATE ExcelUploadHistory
                     SET AuthorisationStatus = 'R',
                         ApprovedBy = v_UserLoginID,
                         DateApproved = SYSDATE
                   WHERE  EffectiveFromTimeKey <= v_Timekey
                    AND EffectiveToTimeKey >= v_Timekey
                    AND UniqueUploadID = v_UniqueUploadID
                    AND UploadType = 'User Upload';

               END;
               END IF;
               IF ( v_OperationFlag = 21 ) THEN

                ----REJECT
               BEGIN
                  --UPDATE 
                  --	[DimUserInfo_Mod] 
                  --	SET 
                  --	AuthorisationStatus	='R'
                  --	,ApprovedBy	=@UserLoginID
                  --	,DateApproved	=GETDATE()
                  --	WHERE UploadId=@UniqueUploadID
                  --	AND AuthorisationStatus in('NP','1A')
                  UPDATE DimUserInfo_mod
                     SET AuthorisationStatus = 'R',
                         ApprovedBy = v_UserLoginID,
                         DateApproved = SYSDATE,
                         EffectiveToTimeKey = EffectiveFromTimeKey - 1
                   WHERE  UploadId = v_UniqueUploadID
                    AND AuthorisationStatus IN ( 'NP','1A' )
                  ;
                  ----SELECT * FROM IBPCPoolDetail
                  UPDATE ExcelUploadHistory
                     SET AuthorisationStatus = 'R',
                         ApprovedBy = v_UserLoginID,
                         DateApproved = SYSDATE
                   WHERE  EffectiveFromTimeKey <= v_Timekey
                    AND EffectiveToTimeKey >= v_Timekey
                    AND UniqueUploadID = v_UniqueUploadID
                    AND UploadType = 'User Upload';

               END;
               END IF;

            END;
            END IF;
            IF v_OperationFlag IN ( 1,2,3,16,17,18,20,21 )

              AND v_AuthMode = 'Y' THEN
             DECLARE
               v_DateCreated DATE;

            BEGIN
               DBMS_OUTPUT.PUT_LINE('log table');
               v_DateCreated := SYSDATE ;
               --declare @ReferenceID1 varchar(max)
               --set @ReferenceID1 = (case when @OperationFlag in (16,20,21) then @UniqueUploadID else @ExcelUploadId end)
               IF v_OperationFlag IN ( 16,17,18,20,21 )
                THEN

               BEGIN
                  DBMS_OUTPUT.PUT_LINE('Authorised');
                  utils.var_number :=LogDetailsInsertUpdate_Attendence -- MAINTAIN LOG TABLE
                  (v_BranchCode => ' ' ----BranchCode
                   ,
                   v_MenuID => v_MenuID,
                   v_ReferenceID => v_UniqueUploadID -- ReferenceID ,
                   ,
                   v_CreatedBy => NULL,
                   v_ApprovedBy => v_UserLoginID,
                   iv_CreatedCheckedDt => v_DateCreated,
                   v_Remark => NULL,
                   v_ScreenEntityAlt_Key => 16 ---ScreenEntityId -- for FXT060 screen
                   ,
                   v_Flag => v_OperationFlag,
                   v_AuthMode => v_AuthMode) ;

               END;
               ELSE

               BEGIN
                  DBMS_OUTPUT.PUT_LINE('UNAuthorised');
                  -- Declare
                  -- set @CreatedBy  =@UserLoginID
                  utils.var_number :=LogDetailsInsertUpdate_Attendence -- MAINTAIN LOG TABLE
                  (v_BranchCode => ' ' ----BranchCode
                   ,
                   v_MenuID => v_MenuID,
                   v_ReferenceID => v_ExcelUploadId -- ReferenceID ,
                   ,
                   v_CreatedBy => v_UserLoginID,
                   v_ApprovedBy => NULL,
                   iv_CreatedCheckedDt => v_DateCreated,
                   v_Remark => NULL,
                   v_ScreenEntityAlt_Key => 16 ---ScreenEntityId -- for FXT060 screen
                   ,
                   v_Flag => v_OperationFlag,
                   v_AuthMode => v_AuthMode) ;

               END;
               END IF;

            END;
            END IF;
            --COMMIT TRAN
            ---SET @Result=CASE WHEN  @OperationFlag=1 THEN @UniqueUploadID ELSE 1 END
            v_Result := CASE 
                             WHEN v_OperationFlag = 1
                               AND v_MenuId = 58 THEN v_ExcelUploadId
            ELSE 1
               END ;
            UPDATE UploadStatus
               SET InsertionOfData = 'Y',
                   InsertionCompletedOn = SYSDATE
             WHERE  FileNames = v_filepath;
            ---- IF EXISTS(SELECT 1 FROM IBPCPoolDetail_stg WHERE filEname=@FilePathUpload)
            ----BEGIN
            ----	 DELETE FROM IBPCPoolDetail_stg
            ----	 WHERE filEname=@FilePathUpload
            ----	 PRINT 'ROWS DELETED FROM IBPCPoolDetail_stg'+CAST(@@ROWCOUNT AS VARCHAR(100))
            ----END
            RETURN v_Result;

         END;
      EXCEPTION
         WHEN OTHERS THEN

      BEGIN
         --RETURN @ExcelUploadId
         --ROLLBACK TRAN
         --PRINT 'CatchDelete'
         --PRINT 'UniqueUploadID'
         --PRINT @UniqueUploadID
         --PRINT 'ExcelUploadId'
         --PRINT @ExcelUploadId
         DELETE ExcelUploadHistory

          WHERE  UniqueUploadID = v_ExcelUploadId;
         OPEN  v_cursor FOR
            SELECT SQLERRM ,
                   utils.error_line 
              FROM DUAL  ;
            DBMS_SQL.RETURN_RESULT(v_cursor);
         v_Result := -1 ;
         UPDATE UploadStatus
            SET InsertionOfData = 'Y',
                InsertionCompletedOn = SYSDATE
          WHERE  FileNames = v_filepath;
         RETURN -1;

      END;END;

   END;
   END IF;

EXCEPTION WHEN OTHERS THEN utils.handleerror(SQLCODE,SQLERRM);
END;

/

  GRANT EXECUTE ON "RBL_MISDB_PROD"."USERUPLOADDATAINUP_24012024" TO "ROLE_LOCAL_RBL_MISDB_PROD_ORACLE";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."USERUPLOADDATAINUP_24012024" TO "PREMOC_RBL_MISDB_PROD";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."USERUPLOADDATAINUP_24012024" TO "QPI_RBL_MISDB_PROD";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."USERUPLOADDATAINUP_24012024" TO "ALERT_RBL_MISDB_PROD";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."USERUPLOADDATAINUP_24012024" TO "DWH_RBL_MISDB_PROD";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."USERUPLOADDATAINUP_24012024" TO "MAIN_PRO";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."USERUPLOADDATAINUP_24012024" TO "D2KMNTR_RBL_MISDB_PROD";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."USERUPLOADDATAINUP_24012024" TO "CURDAT_RBL_MISDB_PROD";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."USERUPLOADDATAINUP_24012024" TO "BS_RBL_MISDB_PROD";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."USERUPLOADDATAINUP_24012024" TO "ACL_RBL_MISDB_PROD";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."USERUPLOADDATAINUP_24012024" TO "ETL_MAIN_RBL_MISDB_PROD";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."USERUPLOADDATAINUP_24012024" TO "DATAUPLOAD_RBL_MISDB_PROD";
  GRANT DEBUG ON "RBL_MISDB_PROD"."USERUPLOADDATAINUP_24012024" TO "ROLE_LOCAL_RBL_MISDB_PROD_ORACLE";
  GRANT DEBUG ON "RBL_MISDB_PROD"."USERUPLOADDATAINUP_24012024" TO "PREMOC_RBL_MISDB_PROD";
  GRANT DEBUG ON "RBL_MISDB_PROD"."USERUPLOADDATAINUP_24012024" TO "QPI_RBL_MISDB_PROD";
  GRANT DEBUG ON "RBL_MISDB_PROD"."USERUPLOADDATAINUP_24012024" TO "ALERT_RBL_MISDB_PROD";
  GRANT DEBUG ON "RBL_MISDB_PROD"."USERUPLOADDATAINUP_24012024" TO "DWH_RBL_MISDB_PROD";
  GRANT DEBUG ON "RBL_MISDB_PROD"."USERUPLOADDATAINUP_24012024" TO "MAIN_PRO";
  GRANT DEBUG ON "RBL_MISDB_PROD"."USERUPLOADDATAINUP_24012024" TO "D2KMNTR_RBL_MISDB_PROD";
  GRANT DEBUG ON "RBL_MISDB_PROD"."USERUPLOADDATAINUP_24012024" TO "CURDAT_RBL_MISDB_PROD";
  GRANT DEBUG ON "RBL_MISDB_PROD"."USERUPLOADDATAINUP_24012024" TO "BS_RBL_MISDB_PROD";
  GRANT DEBUG ON "RBL_MISDB_PROD"."USERUPLOADDATAINUP_24012024" TO "ACL_RBL_MISDB_PROD";
  GRANT DEBUG ON "RBL_MISDB_PROD"."USERUPLOADDATAINUP_24012024" TO "ETL_MAIN_RBL_MISDB_PROD";
  GRANT DEBUG ON "RBL_MISDB_PROD"."USERUPLOADDATAINUP_24012024" TO "DATAUPLOAD_RBL_MISDB_PROD";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."USERUPLOADDATAINUP_24012024" TO "ROLE_ALL_DB";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."USERUPLOADDATAINUP_24012024" TO "CC_CDR_RBL_STGDB";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."USERUPLOADDATAINUP_24012024" TO "RBL_BI_RBL_STGDB";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."USERUPLOADDATAINUP_24012024" TO "BSG_READ_RBL_STGDB";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."USERUPLOADDATAINUP_24012024" TO "STD_FIN_RBL_STGDB";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."USERUPLOADDATAINUP_24012024" TO "RBL_STGDB";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."USERUPLOADDATAINUP_24012024" TO "ETL_TEMP_RBL_TEMPDB";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."USERUPLOADDATAINUP_24012024" TO "RBL_TEMPDB";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."USERUPLOADDATAINUP_24012024" TO "STG_FIN_RBL_STGDB";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."USERUPLOADDATAINUP_24012024" TO "ADF_CDR_RBL_STGDB";
  GRANT DEBUG ON "RBL_MISDB_PROD"."USERUPLOADDATAINUP_24012024" TO "ROLE_ALL_DB";
  GRANT DEBUG ON "RBL_MISDB_PROD"."USERUPLOADDATAINUP_24012024" TO "CC_CDR_RBL_STGDB";
  GRANT DEBUG ON "RBL_MISDB_PROD"."USERUPLOADDATAINUP_24012024" TO "RBL_BI_RBL_STGDB";
  GRANT DEBUG ON "RBL_MISDB_PROD"."USERUPLOADDATAINUP_24012024" TO "BSG_READ_RBL_STGDB";
  GRANT DEBUG ON "RBL_MISDB_PROD"."USERUPLOADDATAINUP_24012024" TO "STD_FIN_RBL_STGDB";
  GRANT DEBUG ON "RBL_MISDB_PROD"."USERUPLOADDATAINUP_24012024" TO "RBL_STGDB";
  GRANT DEBUG ON "RBL_MISDB_PROD"."USERUPLOADDATAINUP_24012024" TO "ETL_TEMP_RBL_TEMPDB";
  GRANT DEBUG ON "RBL_MISDB_PROD"."USERUPLOADDATAINUP_24012024" TO "RBL_TEMPDB";
  GRANT DEBUG ON "RBL_MISDB_PROD"."USERUPLOADDATAINUP_24012024" TO "STG_FIN_RBL_STGDB";
  GRANT DEBUG ON "RBL_MISDB_PROD"."USERUPLOADDATAINUP_24012024" TO "ADF_CDR_RBL_STGDB";
