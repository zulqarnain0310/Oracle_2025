--------------------------------------------------------
--  DDL for Function COLLETRALUPLOADDATAINUP_BACKUP_31012022
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_BACKUP_31012022" 
(
  iv_Timekey IN NUMBER,
  v_UserLoginID IN VARCHAR2,
  v_OperationFlag IN NUMBER,
  v_MenuId IN NUMBER,
  v_AuthMode IN CHAR,
  v_filepath IN VARCHAR2,
  iv_EffectiveFromTimeKey IN NUMBER,
  iv_EffectiveToTimeKey IN NUMBER,
  v_Result OUT NUMBER/* DEFAULT 0*/,
  v_UniqueUploadID IN NUMBER
)
RETURN NUMBER
AS
   v_Timekey NUMBER(10,0) := iv_Timekey;
   v_EffectiveFromTimeKey NUMBER(10,0) := iv_EffectiveFromTimeKey;
   v_EffectiveToTimeKey NUMBER(10,0) := iv_EffectiveToTimeKey;
   v_CollIDAutoGenerated NUMBER(10,0);
   v_CollateralID VARCHAR2(30) := ' ';
   v_FilePathUpload VARCHAR2(100);
   ------RETURN @UniqueUploadID
   --ROLLBACK TRAN
   v_cursor SYS_REFCURSOR;
--@Authlevel varchar(5)
--DECLARE @Timekey INT=24928,
--	@UserLoginID VARCHAR(100)='FNAOPERATOR',
--	@OperationFlag INT=1,
--	@MenuId INT=163,
--	@AuthMode	CHAR(1)='N',
--	@filepath VARCHAR(MAX)='',
--	@EffectiveFromTimeKey INT=24928,
--	@EffectiveToTimeKey	INT=49999,
--    @Result		INT=0 ,
--	@UniqueUploadID INT=41

BEGIN

   /*TODO:SQLDEV*/ SET DATEFORMAT DMY /*END:SQLDEV*/
   --DECLARE @Timekey INT
   --SET @Timekey=(SELECT MAX(TIMEKEY) FROM dbo.SysProcessingCycle
   --	WHERE ProcessType='Quarterly')
   SELECT UTILS.CONVERT_TO_NUMBER(B.timekey,10,0) 

     INTO v_Timekey
     FROM SysDataMatrix A
            JOIN SysDayMatrix B   ON A.TimeKey = B.TimeKey
    WHERE  A.CurrentStatus = 'C';
   DBMS_OUTPUT.PUT_LINE(v_TIMEKEY);
   v_EffectiveFromTimeKey := v_TimeKey ;
   v_EffectiveToTimeKey := 49999 ;
   v_FilePathUpload := v_UserLoginId || '_' || v_filepath ;
   DBMS_OUTPUT.PUT_LINE('@FilePathUpload');
   DBMS_OUTPUT.PUT_LINE(v_FilePathUpload);
   BEGIN
      DECLARE
         v_temp NUMBER(1, 0) := 0;

      BEGIN
         --BEGIN TRAN
         IF ( v_MenuId = 24702 ) THEN

         BEGIN
            --Set @FilePathUpload='mismaker_CollateralUpload_3.xlsx'
            IF ( v_OperationFlag = 1 ) THEN
             DECLARE
               v_temp NUMBER(1, 0) := 0;

            BEGIN
               BEGIN
                  SELECT 1 INTO v_temp
                    FROM DUAL
                   WHERE NOT ( EXISTS ( SELECT 1 
                                        FROM CollateralDetails_stg 
                                         WHERE  filname = v_FilePathUpload ) );
               EXCEPTION
                  WHEN OTHERS THEN
                     NULL;
               END;

               IF v_temp = 1 THEN

               BEGIN
                  --Rollback tran
                  v_Result := -8 ;
                  RETURN v_Result;

               END;
               END IF;
               DBMS_OUTPUT.PUT_LINE('Sachin');
               BEGIN
                  SELECT 1 INTO v_temp
                    FROM DUAL
                   WHERE EXISTS ( SELECT 1 
                                  FROM CollateralDetails_stg 
                                   WHERE  filname = v_FilePathUpload );
               EXCEPTION
                  WHEN OTHERS THEN
                     NULL;
               END;

               IF v_temp = 1 THEN
                DECLARE
                  --sp
                  v_ExcelUploadId NUMBER(10,0);

               BEGIN
                  INSERT INTO ExcelUploadHistory
                    ( UploadedBy, DateofUpload, AuthorisationStatus
                  --,Action	
                  , UploadType, EffectiveFromTimeKey, EffectiveToTimeKey, CreatedBy, DateCreated )
                    ( SELECT v_UserLoginID ,
                             SYSDATE ,
                             'NP' ,
                             --,'NP'
                             'Colletral Upload' ,
                             v_EffectiveFromTimeKey ,
                             v_EffectiveToTimeKey ,
                             v_UserLoginID ,
                             SYSDATE 
                        FROM DUAL  );
                  DBMS_OUTPUT.PUT_LINE(SQL%ROWCOUNT);
                  SELECT MAX(UniqueUploadID)  

                    INTO v_ExcelUploadId
                    FROM ExcelUploadHistory ;
                  INSERT INTO UploadStatus
                    ( FileNames, UploadedBy, UploadDateTime, UploadType )
                    VALUES ( v_filepath, v_UserLoginID, TO_DATE(SYSDATE,'dd/mm/yyyy'), 'Colletral Upload' );
                  v_CollIDAutoGenerated := 0 ;
                  SELECT MAX(UTILS.CONVERT_TO_NUMBER(NVL(CollateralID, 0),10,0))  

                    INTO v_CollIDAutoGenerated
                    FROM ( SELECT MAX(UTILS.CONVERT_TO_NUMBER(NVL(CollateralID, 0),10,0))  CollateralID  
                           FROM CurDat_RBL_MISDB_PROD.AdvSecurityDetail 
                           UNION ALL 
                           SELECT MAX(UTILS.CONVERT_TO_NUMBER(NVL(CollateralID, 0),10,0))  CollateralID  
                           FROM RBL_MISDB_PROD.AdvSecurityDetail_Mod 
                           UNION ALL 
                           SELECT MAX(UTILS.CONVERT_TO_NUMBER(NVL(CollateralID, 0),10,0))  CollateralID  
                           FROM CurDat_RBL_MISDB_PROD.AdvSecurityValueDetail 
                           UNION ALL 
                           SELECT MAX(UTILS.CONVERT_TO_NUMBER(NVL(CollateralID, 0),10,0))  CollateralID  
                           FROM RBL_MISDB_PROD.AdvSecurityValueDetail_Mod  ) X;
                  IF ( v_CollIDAutoGenerated IS NULL ) THEN
                   v_CollIDAutoGenerated := 1000001 ;
                  ELSE
                     v_CollIDAutoGenerated := UTILS.CONVERT_TO_NUMBER(v_CollIDAutoGenerated,10,0) + 1 ;
                  END IF;
                  --Print '@CollIDAutoGenerated'
                  --Print @CollIDAutoGenerated
                  v_CollateralID := UTILS.CONVERT_TO_VARCHAR2(v_CollIDAutoGenerated,30) ;
                  DBMS_OUTPUT.PUT_LINE('SachinModInsert                                                                                                                                                                                                                                   




                                                                                 8');
                  DBMS_OUTPUT.PUT_LINE('@CollateralID');
                  DBMS_OUTPUT.PUT_LINE(v_CollateralID);
                  DBMS_OUTPUT.PUT_LINE('@ExcelUploadId');
                  DBMS_OUTPUT.PUT_LINE(v_ExcelUploadId);
                  DBMS_OUTPUT.PUT_LINE('@FilePathUpload');
                  DBMS_OUTPUT.PUT_LINE(v_FilePathUpload);
                  INSERT INTO CollateralMgmtUpload_Mod
                    ( SrNo, UploadID, OldCollateralID, CollateralID, TaggingLevel, Related_UCIC_CustomerID_AccountID, DistributionLevel, DistributionValue, CollateralType, CollateralSubType, CollateralOwnerType, CollateralOwnershipType, ChargeType, ChargeNature, ShareAvailableToBank, ShareValue, CollateralValueSanctionRs, CollateralValueNPADateRs, CollateralValueLastReviewRs
                  --ValuationDate,
                  , CurrentCollateralValueRs, ExpiryBusinessRule, CreatedBy, DateCreated, AuthorisationStatus, EffectiveFromTimeKey, EffectiveToTimeKey )
                    SELECT SrNo ,
                           v_ExcelUploadId ,
                           OldCollateralID ,
                           v_CollateralID + ROW_NUMBER() OVER ( ORDER BY ( SELECT 1 
                                                                             FROM DUAL  )  ) ,
                           TaggingLevel ,
                           RelatedUCICCustomerIDAccountID ,
                           DistributionLevel ,
                           DistributionValue ,
                           CollateralType ,
                           CollateralSubType ,
                           CollateralOwnerType ,
                           CollateralOwnershipType ,
                           ChargeType ,
                           ChargeNature ,
                           ShareAvailableToBank ,
                           ShareValue ,
                           CollateralValueatSanctioninRs ,
                           CollateralValueasonNPADateinRs ,
                           CollateralValueatLastReviewinRs ,
                           --Convert(Date,ValuationDate) as ValuationDate,
                           CurrentCollateralValueinRs ,
                           ExpiryBusinessRule ,
                           v_UserLoginID ,
                           SYSDATE ,
                           'NP' ,
                           v_Timekey ,
                           49999 
                      FROM CollateralDetails_stg 
                     WHERE  filname = v_FilePathUpload;
                  DBMS_OUTPUT.PUT_LINE(SQL%ROWCOUNT);
                  --Declare @SummaryId int
                  --Set @SummaryId=IsNull((Select Max(SummaryId) from IBPCPoolSummary_Mod),0)
                  --INSERT INTO IBPCPoolSummary_stg
                  --(
                  --	UploadID
                  --	,SummaryID
                  --	,PoolID
                  --	,PoolName
                  --	,PoolType
                  --	,BalanceOutstanding
                  --	,NoOfAccount
                  --	,IBPCExposureAmt
                  --	,IBPCReckoningDate
                  --	,IBPCMarkingDate
                  --	,MaturityDate
                  --	,TotalPosBalance
                  --	,TotalInttReceivable
                  --)
                  --SELECT
                  --	@ExcelUploadId
                  --	,@SummaryId+Row_Number() over(Order by PoolID)
                  --	,PoolID
                  --	,PoolName
                  --	,PoolType
                  --	,Sum(IsNull(Cast(PrincipalOutstandinginRs as decimal(16,2)),0)+IsNull(Cast(InterestReceivableinRs as Decimal(16,2)),0))
                  --	,Count(PoolID)
                  --	,SUM(ISNULL(Cast(IBPCExposureinRs as Decimal(16,2)),0))
                  --	,DateofIBPCreckoning
                  --	,DateofIBPCmarking
                  --	,MaturityDate
                  --	,Sum(IsNull(Cast(PrincipalOutstandinginRs as decimal(16,2)),0))
                  --	,Sum(IsNull(Cast(InterestReceivableinRs as Decimal(16,2)),0))
                  --FROM IBPCPoolDetail_stg
                  --where FilName=@FilePathUpload
                  --Group by PoolID,PoolName,PoolType,DateofIBPCreckoning,DateofIBPCmarking,MaturityDate
                  --INSERT INTO IBPCPoolSummary_Mod
                  --(
                  --	UploadID
                  --	,SummaryID
                  --	,PoolID
                  --	,PoolName
                  --	,BalanceOutstanding
                  --	,NoOfAccount
                  --	,AuthorisationStatus	
                  --	,EffectiveFromTimeKey	
                  --	,EffectiveToTimeKey	
                  --	,CreatedBy	
                  --	,DateCreated	
                  --)
                  --SELECT
                  --	@ExcelUploadId
                  --	,@SummaryId+Row_Number() over(Order by PoolID)
                  --	,PoolID
                  --	,PoolName
                  --	,Sum(IsNull(POS,0)+IsNull(InterestReceivable,0))
                  --	,Count(PoolID)
                  --	,'NP'	
                  --	,@Timekey
                  --	,49999	
                  --	,@UserLoginID	
                  --	,GETDATE()
                  --FROM IBPCPoolDetail_stg
                  --where FilName=@FilePathUpload
                  --Group by PoolID,PoolName
                  ---DELETE FROM STAGING DATA Sachin
                  DELETE CollateralDetails_stg

                   WHERE  filname = v_FilePathUpload;

               END;
               END IF;

            END;
            END IF;
            ----RETURN @ExcelUploadId
            ----DECLARE @UniqueUploadID INT
            --SET 	@UniqueUploadID=(SELECT MAX(UniqueUploadID) FROM  ExcelUploadHistory)
            ----------------------01042021-------------
            IF ( v_OperationFlag = 16 ) THEN

             ----AUTHORIZE
            BEGIN
               UPDATE CollateralMgmtUpload_Mod
                  SET AuthorisationStatus = '1A',
                      ApprovedBy = v_UserLoginID,
                      DateApproved = SYSDATE
                WHERE  UploadID = v_UniqueUploadID;
               UPDATE CollateralMgmtUpload_Mod
                  SET AuthorisationStatus = '1A',
                      ApprovedBy = v_UserLoginID,
                      DateApproved = SYSDATE
                WHERE  UploadId = v_UniqueUploadID;
               UPDATE ExcelUploadHistory
                  SET AuthorisationStatus = '1A',
                      ApprovedBy = v_UserLoginID
                WHERE  UniqueUploadID = v_UniqueUploadID
                 AND UploadType = 'Colletral Upload';

            END;
            END IF;
            --------------------------------------------
            IF ( v_OperationFlag = 20 ) THEN
             DECLARE
               --	INSERT INTO [CollateralMgmt]
               --(
               --	OldCollateralID,
               --	TaggingAlt_Key,
               --	AccountID,
               --	UCICID,
               --	CustomerID,
               --	DistributionAlt_Key,
               --	CollateralTypeAlt_Key,
               --	CollateralSubTypeAlt_Key,
               --	CollateralOwnerTypeAlt_Key,
               --	CollateralOwnerShipTypeAlt_Key,
               --	ChargeTypeAlt_Key,
               --	ChargeNatureAlt_Key,
               --	ShareAvailabletoBankAlt_Key,
               --	CollateralShareamount,
               --    AuthorisationStatus,
               --     EffectiveFromTimeKey,
               --	EffectiveToTimeKey,
               --	CreatedBy,
               --	DateCreated,
               --	ModifiedBy,
               --	DateModified,
               --	ApprovedBy,
               --	DateApproved																					
               --)
               v_SecurityEntityID NUMBER(10,0);

             ----AUTHORIZE
            BEGIN
               UPDATE CollateralMgmtUpload_Mod
                  SET AuthorisationStatus = 'A',
                      ApprovedBy = v_UserLoginID,
                      DateApproved = SYSDATE
                WHERE  UploadId = v_UniqueUploadID;
               UPDATE CollateralMgmtUpload_Mod
                  SET AuthorisationStatus = 'A',
                      ApprovedBy = v_UserLoginID,
                      DateApproved = SYSDATE
                WHERE  UploadId = v_UniqueUploadID;
               SELECT MAX(NVL(SecurityEntityID, 0))  

                 INTO v_SecurityEntityID
                 FROM CurDat_RBL_MISDB_PROD.AdvSecurityDetail ;
               IF ( v_SecurityEntityID IS NULL ) THEN

               BEGIN
                  v_SecurityEntityID := 1 ;

               END;
               ELSE
                  v_SecurityEntityID := v_SecurityEntityID + 1 ;
               END IF;
               DBMS_OUTPUT.PUT_LINE('@SecurityEntityID');
               DBMS_OUTPUT.PUT_LINE(v_SecurityEntityID);
               INSERT INTO CurDat_RBL_MISDB_PROD.AdvSecurityDetail
                 ( CollateralID, Security_RefNo, TaggingAlt_Key, RefSystemAcId, UCICID, RefCustomerId, DistributionAlt_Key, SecurityAlt_Key, CollateralSubTypeAlt_Key, OwnerTypeAlt_Key, CollateralOwnerShipTypeAlt_Key, SecurityChargeTypeAlt_Key, ChargeNatureAlt_Key, ShareAvailabletoBankAlt_Key, CollateralShareamount, CollateralValueatSanctioninRs, CollateralValueasonNPAdateinRs, SecurityEntityID, AuthorisationStatus, EffectiveFromTimeKey, EffectiveToTimeKey, CreatedBy, DateCreated, ModifiedBy, DateModified, ApprovedBy, DateApproved )
                 SELECT CollateralID ,
                        OldCollateralID ,
                        CASE 
                             WHEN TaggingLevel = 'Customer ID' THEN 1
                             WHEN TaggingLevel = 'Account ID' THEN 2
                             WHEN TaggingLevel = 'UCIC' THEN 4
                        ELSE ' '
                           END col  ,
                        CASE 
                             WHEN TaggingLevel = 'Account ID' THEN Related_UCIC_CustomerID_AccountID
                        ELSE ' '
                           END AccountID  ,
                        CASE 
                             WHEN TaggingLevel = 'UCIC' THEN Related_UCIC_CustomerID_AccountID
                        ELSE ' '
                           END UCICID  ,
                        CASE 
                             WHEN TaggingLevel = 'Customer ID' THEN Related_UCIC_CustomerID_AccountID
                        ELSE ' '
                           END CustomerID  ,
                        K.ParameterAlt_Key DistributionValue  ,
                        B.CollateralTypeAltKey ,
                        C.CollateralSubTypeAltKey ,
                        D.CollateralOwnerTypeAltKey ,
                        I.ParameterAlt_Key CollateralOwnerShipTypeAlt_Key  ,
                        F.CollateralChargeTypeAltKey ,
                        G.SecurityChargeTypeAlt_Key ,
                        H.ParameterAlt_Key ShareAvailabletoBankAlt_Key  ,
                        ShareValue ,
                        CollateralValueSanctionRs ,
                        CollateralValueNPADateRs ,
                        v_SecurityEntityID + ROW_NUMBER() OVER ( ORDER BY ( SELECT 1 
                                                                              FROM DUAL  )  ) ,
                        A.AuthorisationStatus ,
                        v_Timekey ,
                        49999 ,
                        A.CreatedBy ,
                        A.DateCreated ,
                        A.ModifiedBy ,
                        A.DateModified ,
                        v_UserLoginID ,
                        SYSDATE 
                   FROM CollateralMgmtUpload_Mod A
                          LEFT JOIN DimCollateralType B   ON A.CollateralType = B.CollateralTypeDescription
                          LEFT JOIN DimCollateralSubType C   ON A.CollateralSubType = C.CollateralSubTypeDescription
                          LEFT JOIN DimCollateralOwnerType D   ON A.CollateralOwnerType = D.CollOwnerDescription
                          LEFT JOIN DimCollateralChargeType F   ON A.ChargeType = F.CollChargeDescription
                          LEFT JOIN DimSecurityChargeType G   ON A.ChargeNature = G.SecurityChargeTypeName
                          LEFT JOIN ( SELECT ParameterAlt_Key ,
                                             ParameterName ,
                                             'ShareAvailabletoBank' Tablename  
                                      FROM DimParameter 
                                       WHERE  DimParameterName = 'CollateralBank'
                                                AND EffectiveFromTimeKey <= v_TimeKey
                                                AND EffectiveToTimeKey >= v_TimeKey ) H   ON H.ParameterName = A.ShareAvailableToBank
                          LEFT JOIN ( SELECT ParameterAlt_Key ,
                                             ParameterName ,
                                             'CollateralOwnershipType' Tablename  
                                      FROM DimParameter 
                                       WHERE  DimParameterName = 'CollateralOwnershipType'
                                                AND EffectiveFromTimeKey <= v_TimeKey
                                                AND EffectiveToTimeKey >= v_TimeKey ) I   ON I.ParameterName = A.CollateralOwnershipType
                          LEFT JOIN ( SELECT ParameterAlt_Key ,
                                             ParameterName ,
                                             'DistributionModel' Tablename  
                                      FROM DimParameter 
                                       WHERE  DimParameterName = 'Collateral'
                                                AND EffectiveFromTimeKey <= v_TimeKey
                                                AND EffectiveToTimeKey >= v_TimeKey ) K   ON K.ParameterName = A.DistributionLevel
                  WHERE  A.UploadID = v_UniqueUploadID
                           AND A.EffectiveToTimeKey >= v_Timekey;
               INSERT INTO CurDat_RBL_MISDB_PROD.AdvSecurityValueDetail
                 ( CollateralValueatthetimeoflastreviewinRs, ValuationDate, CurrentValue, ExpiryBusinessRule, SecurityEntityID, EffectiveFromTimeKey, EffectiveToTimeKey, CreatedBy, DateCreated, ModifiedBy, DateModified, ApprovedBy, DateApproved )
                 SELECT CollateralValueLastReviewRs ,
                        ValuationDate ,
                        CurrentCollateralValueRs ,
                        ExpiryBusinessRule ,
                        v_SecurityEntityID + ROW_NUMBER() OVER ( ORDER BY ( SELECT 1 
                                                                              FROM DUAL  )  ) ,
                        v_Timekey ,
                        49999 ,
                        CreatedBy ,
                        DateCreated ,
                        ModifiedBy ,
                        DateModified ,
                        v_UserLoginID ,
                        SYSDATE 
                   FROM CollateralMgmtUpload_Mod A
                  WHERE  A.UploadID = v_UniqueUploadID
                           AND EffectiveToTimeKey >= v_Timekey;
               -----------------Insert into Final Tables ----------
               -----Summary Final -----------
               /*--------------------Adding Flag To AdvAcOtherDetail------------Sunil 21-03-2021--------*/
               -- UPDATE A
               --SET  
               --       A.SplFlag=CASE WHEN ISNULL(A.SplFlag,'')='' THEN 'IBPC'     
               --					ELSE A.SplFlag+','+'IBPC'     END
               -- FROM DBO.AdvAcOtherDetail A
               --  --INNER JOIN #Temp V  ON A.AccountEntityId=V.AccountEntityId
               -- INNER JOIN CollateralMgmtUpload_Mod B ON A.OldCollateralID=B.OldCollateralID
               --		WHERE  B.UploadId=@UniqueUploadID and B.EffectiveToTimeKey>=@Timekey
               --		AND A.EffectiveToTimeKey=49999
               --------------------------
               --1
               --select *from ExceptionFinalStatusType
               --select * from AdvAcOtherDetail
               --select * from IBPCFinalPoolDetail 
               --alter table IBPCFinalPoolDetail
               --add IBPCOutDate date,IBPCInDate Date
               --update 
               -------------------------------------------
               --		UPDATE A
               --		SET 
               ----A.POS=ROUND(B.POS,2),
               --		a.ModifiedBy=@UserLoginID
               --		,a.DateModified=GETDATE()
               --		FROM CollateralMgmt A
               --		INNER JOIN CollateralMgmtUpload_Mod
               -- B ON (A.EffectiveFromTimeKey<=@Timekey AND A.EffectiveToTimeKey>=@Timekey)
               --															AND  (B.EffectiveFromTimeKey<=@Timekey AND B.EffectiveToTimeKey>=@Timekey)	
               --															AND A.OldCollateralID=B.OldCollateralID
               --WHERE B.AuthorisationStatus='A'
               --AND B.UploadId=@UniqueUploadID
               UPDATE ExcelUploadHistory
                  SET AuthorisationStatus = 'A',
                      ApprovedBy = v_UserLoginID,
                      DateApproved = SYSDATE
                WHERE  EffectiveFromTimeKey <= v_Timekey
                 AND EffectiveToTimeKey >= v_Timekey
                 AND UniqueUploadID = v_UniqueUploadID
                 AND UploadType = 'Colletral Upload';

            END;
            END IF;
            IF ( v_OperationFlag = 17 ) THEN

             ----REJECT
            BEGIN
               UPDATE CollateralMgmtUpload_Mod
                  SET AuthorisationStatus = 'R',
                      ApprovedBy = v_UserLoginID,
                      DateApproved = SYSDATE
                WHERE  UploadId = v_UniqueUploadID
                 AND AuthorisationStatus = 'NP';
               UPDATE CollateralMgmtUpload_Mod
                  SET AuthorisationStatus = 'R',
                      ApprovedBy = v_UserLoginID,
                      DateApproved = SYSDATE
                WHERE  UploadId = v_UniqueUploadID
                 AND AuthorisationStatus = 'NP';
               ----SELECT * FROM IBPCPoolDetail
               UPDATE ExcelUploadHistory
                  SET AuthorisationStatus = 'R',
                      ApprovedBy = v_UserLoginID,
                      DateApproved = SYSDATE
                WHERE  EffectiveFromTimeKey <= v_Timekey
                 AND EffectiveToTimeKey >= v_Timekey
                 AND UniqueUploadID = v_UniqueUploadID
                 AND UploadType = 'Colletral Upload';

            END;
            END IF;
            IF ( v_OperationFlag = 21 ) THEN

             ----REJECT
            BEGIN
               UPDATE CollateralMgmtUpload_Mod
                  SET AuthorisationStatus = 'R',
                      ApprovedBy = v_UserLoginID,
                      DateApproved = SYSDATE
                WHERE  UploadId = v_UniqueUploadID
                 AND AuthorisationStatus IN ( 'NP','1A' )
               ;
               UPDATE CollateralMgmtUpload_Mod
                  SET AuthorisationStatus = 'R',
                      ApprovedBy = v_UserLoginID,
                      DateApproved = SYSDATE
                WHERE  UploadId = v_UniqueUploadID
                 AND AuthorisationStatus IN ( 'NP','1A' )
               ;
               ----SELECT * FROM IBPCPoolDetail
               UPDATE ExcelUploadHistory
                  SET AuthorisationStatus = 'R',
                      ApprovedBy = v_UserLoginID,
                      DateApproved = SYSDATE
                WHERE  EffectiveFromTimeKey <= v_Timekey
                 AND EffectiveToTimeKey >= v_Timekey
                 AND UniqueUploadID = v_UniqueUploadID
                 AND UploadType = 'Colletral Upload';

            END;
            END IF;

         END;
         END IF;
         --COMMIT TRAN
         ---SET @Result=CASE WHEN  @OperationFlag=1 THEN @UniqueUploadID ELSE 1 END
         v_Result := CASE 
                          WHEN v_OperationFlag = 1
                            AND v_MenuId = 24702 THEN v_ExcelUploadId
         ELSE 1
            END ;
         UPDATE UploadStatus
            SET InsertionOfData = 'Y',
                InsertionCompletedOn = SYSDATE
          WHERE  FileNames = v_filepath;
         BEGIN
            SELECT 1 INTO v_temp
              FROM DUAL
             WHERE EXISTS ( SELECT 1 
                            FROM CollateralDetails_stg 
                             WHERE  filname = v_FilePathUpload );
         EXCEPTION
            WHEN OTHERS THEN
               NULL;
         END;

         IF v_temp = 1 THEN

         BEGIN
            DELETE CollateralDetails_stg

             WHERE  filname = v_FilePathUpload;

         END;
         END IF;
         ----	 PRINT 'ROWS DELETED FROM IBPCPoolDetail_stg'+CAST(@@ROWCOUNT AS VARCHAR(100))
         RETURN v_Result;

      END;
   EXCEPTION
      WHEN OTHERS THEN

   BEGIN
      OPEN  v_cursor FOR
         SELECT SQLERRM ,
                utils.error_line 
           FROM DUAL  ;
         DBMS_SQL.RETURN_RESULT(v_cursor);
      v_Result := -1 ;
      UPDATE UploadStatus
         SET InsertionOfData = 'Y',
             InsertionCompletedOn = SYSDATE
       WHERE  FileNames = v_filepath;
      RETURN -1;

   END;END;

EXCEPTION WHEN OTHERS THEN utils.handleerror(SQLCODE,SQLERRM);
END;

/

  GRANT EXECUTE ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_BACKUP_31012022" TO "ROLE_LOCAL_RBL_MISDB_PROD_ORACLE";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_BACKUP_31012022" TO "PREMOC_RBL_MISDB_PROD";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_BACKUP_31012022" TO "QPI_RBL_MISDB_PROD";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_BACKUP_31012022" TO "ALERT_RBL_MISDB_PROD";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_BACKUP_31012022" TO "DWH_RBL_MISDB_PROD";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_BACKUP_31012022" TO "MAIN_PRO";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_BACKUP_31012022" TO "D2KMNTR_RBL_MISDB_PROD";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_BACKUP_31012022" TO "CURDAT_RBL_MISDB_PROD";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_BACKUP_31012022" TO "BS_RBL_MISDB_PROD";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_BACKUP_31012022" TO "ACL_RBL_MISDB_PROD";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_BACKUP_31012022" TO "ETL_MAIN_RBL_MISDB_PROD";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_BACKUP_31012022" TO "DATAUPLOAD_RBL_MISDB_PROD";
  GRANT DEBUG ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_BACKUP_31012022" TO "ROLE_LOCAL_RBL_MISDB_PROD_ORACLE";
  GRANT DEBUG ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_BACKUP_31012022" TO "PREMOC_RBL_MISDB_PROD";
  GRANT DEBUG ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_BACKUP_31012022" TO "QPI_RBL_MISDB_PROD";
  GRANT DEBUG ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_BACKUP_31012022" TO "ALERT_RBL_MISDB_PROD";
  GRANT DEBUG ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_BACKUP_31012022" TO "DWH_RBL_MISDB_PROD";
  GRANT DEBUG ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_BACKUP_31012022" TO "MAIN_PRO";
  GRANT DEBUG ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_BACKUP_31012022" TO "D2KMNTR_RBL_MISDB_PROD";
  GRANT DEBUG ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_BACKUP_31012022" TO "CURDAT_RBL_MISDB_PROD";
  GRANT DEBUG ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_BACKUP_31012022" TO "BS_RBL_MISDB_PROD";
  GRANT DEBUG ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_BACKUP_31012022" TO "ACL_RBL_MISDB_PROD";
  GRANT DEBUG ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_BACKUP_31012022" TO "ETL_MAIN_RBL_MISDB_PROD";
  GRANT DEBUG ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_BACKUP_31012022" TO "DATAUPLOAD_RBL_MISDB_PROD";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_BACKUP_31012022" TO "ROLE_ALL_DB";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_BACKUP_31012022" TO "CC_CDR_RBL_STGDB";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_BACKUP_31012022" TO "RBL_BI_RBL_STGDB";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_BACKUP_31012022" TO "BSG_READ_RBL_STGDB";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_BACKUP_31012022" TO "STD_FIN_RBL_STGDB";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_BACKUP_31012022" TO "RBL_STGDB";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_BACKUP_31012022" TO "ETL_TEMP_RBL_TEMPDB";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_BACKUP_31012022" TO "RBL_TEMPDB";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_BACKUP_31012022" TO "STG_FIN_RBL_STGDB";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_BACKUP_31012022" TO "ADF_CDR_RBL_STGDB";
  GRANT DEBUG ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_BACKUP_31012022" TO "ROLE_ALL_DB";
  GRANT DEBUG ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_BACKUP_31012022" TO "CC_CDR_RBL_STGDB";
  GRANT DEBUG ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_BACKUP_31012022" TO "RBL_BI_RBL_STGDB";
  GRANT DEBUG ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_BACKUP_31012022" TO "BSG_READ_RBL_STGDB";
  GRANT DEBUG ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_BACKUP_31012022" TO "STD_FIN_RBL_STGDB";
  GRANT DEBUG ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_BACKUP_31012022" TO "RBL_STGDB";
  GRANT DEBUG ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_BACKUP_31012022" TO "ETL_TEMP_RBL_TEMPDB";
  GRANT DEBUG ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_BACKUP_31012022" TO "RBL_TEMPDB";
  GRANT DEBUG ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_BACKUP_31012022" TO "STG_FIN_RBL_STGDB";
  GRANT DEBUG ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_BACKUP_31012022" TO "ADF_CDR_RBL_STGDB";
