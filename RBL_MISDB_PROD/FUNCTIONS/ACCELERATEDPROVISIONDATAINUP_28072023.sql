--------------------------------------------------------
--  DDL for Function ACCELERATEDPROVISIONDATAINUP_28072023
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "RBL_MISDB_PROD"."ACCELERATEDPROVISIONDATAINUP_28072023" 
(
  iv_Timekey IN NUMBER,
  v_UserLoginID IN VARCHAR2,
  v_OperationFlag IN NUMBER,
  v_MenuId IN NUMBER,
  v_AuthMode IN CHAR,
  v_filepath IN VARCHAR2,
  iv_EffectiveFromTimeKey IN NUMBER,
  iv_EffectiveToTimeKey IN NUMBER,
  v_Result OUT NUMBER/* DEFAULT 0*/,
  v_UniqueUploadID IN NUMBER
)
RETURN NUMBER
AS
   v_Timekey NUMBER(10,0) := iv_Timekey;
   v_EffectiveFromTimeKey NUMBER(10,0) := iv_EffectiveFromTimeKey;
   v_EffectiveToTimeKey NUMBER(10,0) := iv_EffectiveToTimeKey;
   v_CollIDAutoGenerated NUMBER(10,0);
   v_CollateralID VARCHAR2(30) := ' ';
   v_FilePathUpload VARCHAR2(100);
   ------RETURN @UniqueUploadID
   --ROLLBACK TRAN
   v_cursor SYS_REFCURSOR;
--@Authlevel varchar(5)
--DECLARE @Timekey INT=24928,
--	@UserLoginID VARCHAR(100)='FNAOPERATOR',
--	@OperationFlag INT=1,
--	@MenuId INT=163,
--	@AuthMode	CHAR(1)='N',
--	@filepath VARCHAR(MAX)='',
--	@EffectiveFromTimeKey INT=24928,
--	@EffectiveToTimeKey	INT=49999,
--    @Result		INT=0 ,
--	@UniqueUploadID INT=41

BEGIN

   /*TODO:SQLDEV*/ SET DATEFORMAT DMY /*END:SQLDEV*/
   --DECLARE @Timekey INT
   --SET @Timekey=(SELECT MAX(TIMEKEY) FROM dbo.SysProcessingCycle
   --	WHERE ProcessType='Quarterly')
   --Set @Timekey=(
   --select CAST(B.timekey as int)from SysDataMatrix A
   --Inner Join SysDayMatrix B ON A.TimeKey=B.TimeKey
   -- where A.CurrentStatus='C'
   -- )
   SELECT Timekey 

     INTO v_Timekey
     FROM SysDataMatrix 
    WHERE  MOC_Initialised = 'Y'
             AND NVL(MOC_Frozen, 'N') = 'N';
   DBMS_OUTPUT.PUT_LINE(v_TIMEKEY);
   v_EffectiveFromTimeKey := v_TimeKey ;
   v_EffectiveToTimeKey := 49999 ;
   v_FilePathUpload := v_UserLoginId || '_' || v_filepath ;
   DBMS_OUTPUT.PUT_LINE('@FilePathUpload');
   DBMS_OUTPUT.PUT_LINE(v_FilePathUpload);
   BEGIN
      DECLARE
         v_temp NUMBER(1, 0) := 0;

      BEGIN
         --BEGIN TRAN
         IF ( v_MenuId = 24745 ) THEN

         BEGIN
            --Set @FilePathUpload='mismaker_CollateralUpload_3.xlsx'
            IF ( v_OperationFlag = 1 ) THEN
             DECLARE
               v_temp NUMBER(1, 0) := 0;

            BEGIN
               BEGIN
                  SELECT 1 INTO v_temp
                    FROM DUAL
                   WHERE NOT ( EXISTS ( SELECT 1 
                                        FROM AccountLevelApproachUpload_stg 
                                         WHERE  filname = v_FilePathUpload ) );
               EXCEPTION
                  WHEN OTHERS THEN
                     NULL;
               END;

               IF v_temp = 1 THEN

               BEGIN
                  --Rollback tran
                  v_Result := -8 ;
                  RETURN v_Result;

               END;
               END IF;
               DBMS_OUTPUT.PUT_LINE('Sachin');
               BEGIN
                  SELECT 1 INTO v_temp
                    FROM DUAL
                   WHERE EXISTS ( SELECT 1 
                                  FROM AccountLevelApproachUpload_stg 
                                   WHERE  filname = v_FilePathUpload );
               EXCEPTION
                  WHEN OTHERS THEN
                     NULL;
               END;

               IF v_temp = 1 THEN
                DECLARE
                  --sp
                  v_ExcelUploadId NUMBER(10,0);
                  v_AcceleratedProvisionEntityID NUMBER(10,0);

               BEGIN
                  INSERT INTO ExcelUploadHistory
                    ( UploadedBy, DateofUpload, AuthorisationStatus
                  --,Action	
                  , UploadType, EffectiveFromTimeKey, EffectiveToTimeKey, CreatedBy, DateCreated )
                    ( SELECT v_UserLoginID ,
                             SYSDATE ,
                             'NP' ,
                             --,'NP'
                             'Acce Provision Upload' ,
                             v_EffectiveFromTimeKey ,
                             v_EffectiveToTimeKey ,
                             v_UserLoginID ,
                             SYSDATE 
                        FROM DUAL  );
                  DBMS_OUTPUT.PUT_LINE(SQL%ROWCOUNT);
                  SELECT MAX(UniqueUploadID)  

                    INTO v_ExcelUploadId
                    FROM ExcelUploadHistory ;
                  INSERT INTO UploadStatus
                    ( FileNames, UploadedBy, UploadDateTime, UploadType )
                    VALUES ( v_filepath, v_UserLoginID, TO_DATE(SYSDATE,'dd/mm/yyyy'), 'Acce Provision Upload' );
                  SELECT MAX(NVL(AcceleratedProvisionEntityID, 0))  + 1 

                    INTO v_AcceleratedProvisionEntityID
                    FROM ( SELECT MAX(AcceleratedProvisionEntityID)  AcceleratedProvisionEntityID  
                           FROM AcceleratedProvision 
                           UNION 
                           SELECT MAX(AcceleratedProvisionEntityID)  AcceleratedProvisionEntityID  
                           FROM AcceleratedProvision_Mod  ) A;
                  IF ( v_AcceleratedProvisionEntityID IS NULL ) THEN
                   v_AcceleratedProvisionEntityID := 1 ;
                  END IF;
                  /*TODO:SQLDEV*/ SET dateformat DMY /*END:SQLDEV*/
                  --Update A
                  --SET A.BusinessSegment=C.AcBuSegmentCode
                  --From AccountLevelApproachUpload_stg A 
                  --Left JOIN (
                  --Select  AcBuSegmentCode,AcBuRevisedSegmentCode,'SegmentMaster' as TableName 
                  --from DimAcBuSegment A where	 A.EffectiveFromTimeKey<=@TimeKey
                  --AND A.EffectiveToTimeKey >=@TimeKey) 
                  --C ON A.BusinessSegment=C.AcBuRevisedSegmentCode
                  --Where filname=@FilePathUpload
                  --Update A
                  --SET A.AssetClassification=C.AssetClassAlt_Key
                  --From AccountLevelApproachUpload_stg A 
                  --Left JOIN (Select	 AssetClassAlt_Key,AssetClassName,'AssetClass' as Tablename from DimAssetClass 
                  --where EffectiveFromTimeKey<=@Timekey And EffectiveToTimeKey>=@Timekey) 
                  --C ON A.AssetClassification=C.AssetClassName
                  --Where filname=@FilePathUpload
                  INSERT INTO AcceleratedProvision_Mod
                    ( AcceleratedProvisionEntityID, UploadID, CustomerId, AccountId, UCICID, AcceProDuration, EffectiveDate, Secured_Unsecured, AdditionalProvision, AdditionalProvACCT, CreatedBy, DateCreated, AuthorisationStatus, EffectiveFromTimeKey, EffectiveToTimeKey, ScreenFlag, SegmentNameAlt_key, AssetClassNameAlt_key )
                    SELECT v_AcceleratedProvisionEntityID + ROW_NUMBER() OVER ( ORDER BY ( SELECT 1 
                                                                                             FROM DUAL  )  ) ,
                           v_ExcelUploadId ,
                           CASE 
                                WHEN CustomerID = ' ' THEN NULL
                           ELSE CustomerID
                              END CustomerID  ,
                           CASE 
                                WHEN AccountID = ' ' THEN NULL
                           ELSE AccountID
                              END AccountID  ,
                           CASE 
                                WHEN UCIC = ' ' THEN NULL
                           ELSE UCIC
                              END UCIC  ,
                           B.ParameterAlt_Key ,
                           CASE 
                                WHEN NVL(EffectiveDate, ' ') = ' ' THEN NULL
                           ELSE UTILS.CONVERT_TO_VARCHAR2(EffectiveDate,200)
                              END EffectiveDate  ,
                           SecuredUnsecured ,
                           CASE 
                                WHEN NVL(AdditionalProvision, ' ') <> ' ' THEN UTILS.CONVERT_TO_NUMBER(AdditionalProvision,16,2)
                           ELSE NULL
                              END AdditionalProvision  ,
                           CASE 
                                WHEN NVL(AdditionalProvforACCTIDRs, ' ') <> ' ' THEN UTILS.CONVERT_TO_NUMBER(AdditionalProvforACCTIDRs,20,2)
                           ELSE NULL
                              END AdditionalProvforACCTIDRs  ,
                           v_UserLoginID ,
                           SYSDATE ,
                           'NP' ,
                           v_Timekey ,
                           49999 ,
                           'U' ,
                           BusinessSegment ,
                           AssetClassification 
                      FROM AccountLevelApproachUpload_stg A
                             LEFT JOIN ( SELECT ParameterAlt_Key ,
                                                ParameterName ,
                                                'AcceleratedProvisionDuration' Tablename  
                      FROM DimParameter 
                     WHERE  DimParameterName = 'DimAccProvDuration'
                              AND EffectiveFromTimeKey <= v_TimeKey
                              AND EffectiveToTimeKey >= v_TimeKey ) B   ON A.AcceleratedProvisionDuration = B.ParameterName
                     WHERE  filname = v_FilePathUpload
                              AND AccountID <> ' ';
                  /*TODO:SQLDEV*/ SET dateformat DMY /*END:SQLDEV*/
                  INSERT INTO AcceleratedProvision_Mod
                    ( AcceleratedProvisionEntityID, UploadID, CustomerId, AccountId, UCICID, AcceProDuration, EffectiveDate, Secured_Unsecured, AdditionalProvision, AdditionalProvACCT, CreatedBy, DateCreated, AuthorisationStatus, EffectiveFromTimeKey, EffectiveToTimeKey, ScreenFlag, SegmentNameAlt_key, AssetClassNameAlt_key )
                    SELECT v_AcceleratedProvisionEntityID + RANK() OVER ( ORDER BY A.CustomerID  ) ,
                           v_ExcelUploadId ,
                           CASE 
                                WHEN A.CustomerID = ' ' THEN NULL
                           ELSE A.CustomerID
                              END CustomerID  ,
                           E.CustomerACID AccountID  ,
                           CASE 
                                WHEN UCIC = ' ' THEN NULL
                           ELSE UCIC
                              END UCIC  ,
                           B.ParameterAlt_Key ,
                           CASE 
                                WHEN NVL(A.EffectiveDate, ' ') = ' ' THEN NULL
                           ELSE UTILS.CONVERT_TO_VARCHAR2(EffectiveDate,200)
                              END EffectiveDate  ,
                           A.SecuredUnsecured ,
                           CASE 
                                WHEN NVL(A.AdditionalProvision, ' ') <> ' ' THEN UTILS.CONVERT_TO_NUMBER(AdditionalProvision,16,2)
                           ELSE NULL
                              END AdditionalProvision  ,
                           CASE 
                                WHEN NVL(A.AdditionalProvforACCTIDRs, ' ') <> ' ' THEN UTILS.CONVERT_TO_NUMBER(AdditionalProvforACCTIDRs,20,2)
                           ELSE NULL
                              END AdditionalProvforACCTIDRs  ,
                           v_UserLoginID ,
                           SYSDATE ,
                           'NP' ,
                           v_Timekey ,
                           49999 ,
                           'U' ,
                           BusinessSegment ,
                           AssetClassification 
                      FROM AccountLevelApproachUpload_stg A
                             JOIN RBL_MISDB_PROD.CustomerBasicDetail F   ON A.CustomerID = F.CustomerId
                             JOIN RBL_MISDB_PROD.AdvAcBasicDetail E   ON E.CustomerEntityId = F.CustomerEntityId
                             LEFT JOIN RBL_MISDB_PROD.AdvCustNPADetail G   ON E.CustomerEntityId = G.CustomerEntityId
                             AND G.EffectiveFromTimeKey <= v_TimeKey
                             AND G.EffectiveToTimeKey >= v_TimeKey
                             LEFT JOIN ( SELECT ParameterAlt_Key ,
                                                ParameterName ,
                                                'AcceleratedProvisionDuration' Tablename  
                                         FROM DimParameter 
                                          WHERE  DimParameterName = 'DimAccProvDuration'
                                                   AND EffectiveFromTimeKey <= v_TimeKey
                                                   AND EffectiveToTimeKey >= v_TimeKey ) B   ON A.AcceleratedProvisionDuration = B.ParameterName
                     WHERE  filname = v_FilePathUpload
                              AND F.EffectiveFromTimeKey <= v_TimeKey
                              AND F.EffectiveToTimeKey >= v_TimeKey
                              AND E.EffectiveFromTimeKey <= v_TimeKey
                              AND E.EffectiveToTimeKey >= v_TimeKey
                              AND A.CustomerID <> ' '

                              --AND A.BusinessSegment=E.segmentcode
                              AND E.segmentcode IN ( SELECT AcBuSegmentCode 
                                                     FROM DimAcBuSegment A
                                                            JOIN AccountLevelApproachUpload_stg Z   ON A.AcBuRevisedSegmentCode = Z.BusinessSegment )

                              AND A.AssetClassification = G.Cust_AssetClassAlt_Key
                              AND E.FlgSecured = CASE 
                                                      WHEN SecuredUnsecured = 'Secured' THEN 'S'
                                                      WHEN SecuredUnsecured = 'Unsecured' THEN 'U'   END;
                  /*TODO:SQLDEV*/ SET dateformat DMY /*END:SQLDEV*/
                  INSERT INTO AcceleratedProvision_Mod
                    ( AcceleratedProvisionEntityID, UploadID, CustomerId, AccountId, UCICID, AcceProDuration, EffectiveDate, Secured_Unsecured, AdditionalProvision, AdditionalProvACCT, CreatedBy, DateCreated, AuthorisationStatus, EffectiveFromTimeKey, EffectiveToTimeKey, ScreenFlag, SegmentNameAlt_key, AssetClassNameAlt_key )
                    SELECT v_AcceleratedProvisionEntityID + RANK() OVER ( ORDER BY A.UCIC  ) ,
                           v_ExcelUploadId ,
                           CASE 
                                WHEN A.CustomerID = ' ' THEN NULL
                           ELSE A.CustomerID
                              END CustomerID  ,
                           E.CustomerACID AccountID  ,
                           CASE 
                                WHEN UCIC = ' ' THEN NULL
                           ELSE UCIC
                              END UCIC  ,
                           B.ParameterAlt_Key ,
                           CASE 
                                WHEN NVL(A.EffectiveDate, ' ') = ' ' THEN NULL
                           ELSE UTILS.CONVERT_TO_VARCHAR2(EffectiveDate,200)
                              END EffectiveDate  ,
                           A.SecuredUnsecured ,
                           CASE 
                                WHEN NVL(A.AdditionalProvision, ' ') <> ' ' THEN UTILS.CONVERT_TO_NUMBER(AdditionalProvision,16,2)
                           ELSE NULL
                              END AdditionalProvision  ,
                           CASE 
                                WHEN NVL(A.AdditionalProvforACCTIDRs, ' ') <> ' ' THEN UTILS.CONVERT_TO_NUMBER(AdditionalProvforACCTIDRs,20,2)
                           ELSE NULL
                              END AdditionalProvforACCTIDRs  ,
                           v_UserLoginID ,
                           SYSDATE ,
                           'NP' ,
                           v_Timekey ,
                           49999 ,
                           'U' ,
                           BusinessSegment ,
                           AssetClassification 
                      FROM AccountLevelApproachUpload_stg A
                             JOIN RBL_MISDB_PROD.CustomerBasicDetail F   ON A.UCIC = F.UCIF_ID
                             JOIN RBL_MISDB_PROD.AdvAcBasicDetail E   ON E.CustomerEntityId = F.CustomerEntityId
                             LEFT JOIN RBL_MISDB_PROD.AdvCustNPADetail G   ON E.CustomerEntityId = G.CustomerEntityId
                             AND G.EffectiveFromTimeKey <= v_TimeKey
                             AND G.EffectiveToTimeKey >= v_TimeKey
                             LEFT JOIN ( SELECT ParameterAlt_Key ,
                                                ParameterName ,
                                                'AcceleratedProvisionDuration' Tablename  
                                         FROM DimParameter 
                                          WHERE  DimParameterName = 'DimAccProvDuration'
                                                   AND EffectiveFromTimeKey <= v_TimeKey
                                                   AND EffectiveToTimeKey >= v_TimeKey ) B   ON A.AcceleratedProvisionDuration = B.ParameterName
                     WHERE  filname = v_FilePathUpload
                              AND F.EffectiveFromTimeKey <= v_TimeKey
                              AND F.EffectiveToTimeKey >= v_TimeKey
                              AND E.EffectiveFromTimeKey <= v_TimeKey
                              AND E.EffectiveToTimeKey >= v_TimeKey
                              AND A.UCIC <> ' '

                              --AND A.BusinessSegment=E.segmentcode
                              AND E.segmentcode IN ( SELECT AcBuSegmentCode 
                                                     FROM DimAcBuSegment A
                                                            JOIN AccountLevelApproachUpload_stg Z   ON A.AcBuRevisedSegmentCode = Z.BusinessSegment )

                              AND A.AssetClassification = G.Cust_AssetClassAlt_Key
                              AND E.FlgSecured = CASE 
                                                      WHEN SecuredUnsecured = 'Secured' THEN 'S'
                                                      WHEN SecuredUnsecured = 'Unsecured' THEN 'U'   END;
                  --UPDATE A
                  --SET A.CurrentProvisionPer=Case When A.Secured_Unsecured='Secured' Then D.ProvisionSecured
                  --				               When A.Secured_Unsecured='Unsecured' Then D.ProvisionUnSecured END
                  --From AcceleratedProvision_Mod A  with (nolock) INNER Join
                  --(Select ProvisionAlt_Key,CustomerAcID,EffectiveFromTimeKey,EffectiveToTimeKey  from PRO.AccountCal_Hist A with (nolock)
                  --where A.EffectiveFromTimeKey<=@Timekey AND A.EffectiveToTimeKey>=@Timekey) B 
                  --ON A.AccountId=B.CustomerAcID 
                  --Left Join DimProvision_Seg D ON B.ProvisionAlt_Key=D.ProvisionAlt_Key
                  --Where A.UploadID=@ExcelUploadId
                  IF  --SQLDEV: NOT RECOGNIZED
                  IF #ACCOUNTCAL_HIST  --SQLDEV: NOT RECOGNIZED
                  DELETE FROM tt_AccountCal_Hist_12;
                  UTILS.IDENTITY_RESET('tt_AccountCal_Hist_12');

                  INSERT INTO tt_AccountCal_Hist_12 ( 
                  	SELECT ProvisionAlt_Key ,
                          CustomerAcID 
                  	  FROM PRO_RBL_MISDB_PROD.AccountCal_Hist A
                            JOIN AcceleratedProvision_Mod b   ON A.EffectiveFromTimeKey <= v_Timekey
                            AND A.EffectiveToTimeKey >= v_Timekey
                            AND b.AccountId = A.CustomerAcID
                            AND b.UploadID = v_ExcelUploadId );
                  MERGE INTO A 
                  USING (SELECT A.ROWID row_id, CASE 
                  WHEN A.Secured_Unsecured = 'Secured' THEN D.ProvisionSecured
                  WHEN A.Secured_Unsecured = 'Unsecured' THEN D.ProvisionUnSecured   END AS CurrentProvisionPer
                  FROM A ,AcceleratedProvision_Mod A
                         JOIN tt_AccountCal_Hist_12 B   ON A.AccountId = B.CustomerAcID
                         LEFT JOIN DimProvision_Seg D   ON B.ProvisionAlt_Key = D.ProvisionAlt_Key
                         AND D.EffectiveFromTimeKey <= v_Timekey
                         AND D.EffectiveToTimeKey >= v_Timekey 
                   WHERE A.UploadID = v_ExcelUploadId) src
                  ON ( A.ROWID = src.row_id )
                  WHEN MATCHED THEN UPDATE SET A.CurrentProvisionPer = src.CurrentProvisionPer;
                  --AND B.EffectiveFromTimeKey<=@Timekey AND B.EffectiveToTimeKey>=@Timekey								   
                  --Update A
                  --SET A.CurrentProvisionPer=Case When A.Secured_Unsecured='Secured' Then D.ProvisionSecured
                  --				                               When A.Secured_Unsecured='Unsecured' Then D.ProvisionUnSecured END
                  --From AcceleratedProvision_Mod A 
                  --INNER Join PRO.AccountCal_Hist C
                  --ON A.AccountId=C.CustomerAcID 
                  --Left Join DimProvision_Seg D ON C.ProvisionAlt_Key=D.ProvisionAlt_Key
                  --Where A.UploadID=@ExcelUploadId
                  --AND C.EffectiveFromTimeKey<=@Timekey AND C.EffectiveToTimeKey>=@Timekey
                  --AND Secured_Unsecured='Secured'
                  --Update A
                  --SET A.CurrentProvisionPer=D.ProvisionUnSecured
                  --From AcceleratedProvision_Mod A 
                  --INNER Join PRO.AccountCal_Hist C
                  --ON A.AccountId=C.CustomerAcID 
                  --Left Join DimProvision_Seg D ON C.ProvisionAlt_Key=D.ProvisionAlt_Key
                  --Where A.UploadID=@ExcelUploadId
                  --AND C.EffectiveFromTimeKey<=@Timekey AND C.EffectiveToTimeKey>=@Timekey
                  --AND Secured_Unsecured='UnSecured'
                  MERGE INTO A 
                  USING (SELECT A.ROWID row_id, C.CustomerEntityId
                  FROM A ,AcceleratedProvision_Mod A
                         JOIN RBL_MISDB_PROD.CustomerBasicDetail C   ON A.CustomerId = C.CustomerID 
                   WHERE A.UploadID = v_ExcelUploadId
                    AND C.EffectiveFromTimeKey <= v_TimeKey
                    AND C.EffectiveToTimeKey >= v_TimeKey) src
                  ON ( A.ROWID = src.row_id )
                  WHEN MATCHED THEN UPDATE SET A.CustomerEntityId = src.CustomerEntityId;
                  MERGE INTO A 
                  USING (SELECT A.ROWID row_id, C.UcifEntityID
                  FROM A ,AcceleratedProvision_Mod A
                         JOIN RBL_MISDB_PROD.CustomerBasicDetail C   ON A.UCICID = C.UCIF_ID 
                   WHERE A.UploadID = v_ExcelUploadId
                    AND C.EffectiveFromTimeKey <= v_TimeKey
                    AND C.EffectiveToTimeKey >= v_TimeKey) src
                  ON ( A.ROWID = src.row_id )
                  WHEN MATCHED THEN UPDATE SET A.UcifEntityID = src.UcifEntityID;
                  MERGE INTO A 
                  USING (SELECT A.ROWID row_id, B.AccountEntityId
                  FROM A ,AcceleratedProvision_Mod A
                         JOIN RBL_MISDB_PROD.AdvAcBasicDetail B   ON A.AccountId = B.CustomerACID 
                   WHERE A.UploadID = v_ExcelUploadId
                    AND B.EffectiveFromTimeKey <= v_TimeKey
                    AND B.EffectiveToTimeKey >= v_TimeKey) src
                  ON ( A.ROWID = src.row_id )
                  WHEN MATCHED THEN UPDATE SET A.AccountEntityId = src.AccountEntityId;
                  --Update A
                  --SET A.SegmentNameAlt_key=C.AcBuRevisedSegmentCode
                  --From AcceleratedProvision_Mod A 
                  --Left JOIN (
                  --Select  AcBuSegmentCode,AcBuRevisedSegmentCode,'SegmentMaster' as TableName 
                  --from DimAcBuSegment A where	 A.EffectiveFromTimeKey<=@TimeKey
                  --AND A.EffectiveToTimeKey >=@TimeKey) 
                  --C ON A.SegmentNameAlt_key=C.AcBuSegmentCode
                  --Where A.UploadID=@ExcelUploadId
                  DBMS_OUTPUT.PUT_LINE('A');
                  ---------------------------------------------------------ChangeField Logic---------------------
                  ----select * from AccountLvlMOCDetails_stg
                  IF utils.object_id('TempDB..tt_CollateralDetails_Upload_8') IS NOT NULL THEN
                   EXECUTE IMMEDIATE ' TRUNCATE TABLE tt_CollateralDetails_Upload_8 ';
                  END IF;
                  DELETE FROM tt_CollateralDetails_Upload_8;
                  INSERT INTO tt_CollateralDetails_Upload_8
                    ( AccountId, FieldName )
                    ( SELECT CASE 
                                  WHEN AccountId <> ' ' THEN AccountID
                                  WHEN CustomerID <> ' ' THEN CustomerID
                                  WHEN UCIC <> ' ' THEN UCIC   END AccountId  ,
                             'AcceleratedProvisionDuration' FieldName  
                      FROM AccountLevelApproachUpload_stg 
                       WHERE  NVL(AcceleratedProvisionDuration, ' ') <> ' '
                      UNION 
                      SELECT CASE 
                                  WHEN AccountId <> ' ' THEN AccountID
                                  WHEN CustomerID <> ' ' THEN CustomerID
                                  WHEN UCIC <> ' ' THEN UCIC   END AccountId  ,
                             'EffectiveDate' FieldName  
                      FROM AccountLevelApproachUpload_stg 
                       WHERE  NVL(EffectiveDate, ' ') <> ' '
                      UNION ALL 
                      SELECT CASE 
                                  WHEN AccountId <> ' ' THEN AccountID
                                  WHEN CustomerID <> ' ' THEN CustomerID
                                  WHEN UCIC <> ' ' THEN UCIC   END AccountId  ,
                             'AccountId' FieldName  
                      FROM AccountLevelApproachUpload_stg 
                       WHERE  NVL(AccountId, ' ') <> ' '
                      UNION ALL 
                      SELECT CASE 
                                  WHEN AccountId <> ' ' THEN AccountID
                                  WHEN CustomerID <> ' ' THEN CustomerID
                                  WHEN UCIC <> ' ' THEN UCIC   END AccountId  ,
                             'CustomerId' FieldName  
                      FROM AccountLevelApproachUpload_stg 
                       WHERE  NVL(CustomerId, ' ') <> ' '
                      UNION ALL 
                      SELECT CASE 
                                  WHEN AccountId <> ' ' THEN AccountID
                                  WHEN CustomerID <> ' ' THEN CustomerID
                                  WHEN UCIC <> ' ' THEN UCIC   END AccountId  ,
                             'AdditionalProvision' FieldName  
                      FROM AccountLevelApproachUpload_stg 
                       WHERE  NVL(AdditionalProvision, ' ') <> ' '
                      UNION ALL 
                      SELECT CASE 
                                  WHEN AccountId <> ' ' THEN AccountID
                                  WHEN CustomerID <> ' ' THEN CustomerID
                                  WHEN UCIC <> ' ' THEN UCIC   END AccountId  ,
                             'UCIC' FieldName  
                      FROM AccountLevelApproachUpload_stg 
                       WHERE  NVL(UCIC, ' ') <> ' '
                      UNION ALL 
                      SELECT CASE 
                                  WHEN AccountId <> ' ' THEN AccountID
                                  WHEN CustomerID <> ' ' THEN CustomerID
                                  WHEN UCIC <> ' ' THEN UCIC   END AccountId  ,
                             'SecuredUnsecured' FieldName  
                      FROM AccountLevelApproachUpload_stg 
                       WHERE  NVL(SecuredUnsecured, ' ') <> ' '
                      UNION ALL 
                      SELECT CASE 
                                  WHEN AccountId <> ' ' THEN AccountID
                                  WHEN CustomerID <> ' ' THEN CustomerID
                                  WHEN UCIC <> ' ' THEN UCIC   END AccountId  ,
                             'AdditionalProvforACCTIDRs' FieldName  
                      FROM AccountLevelApproachUpload_stg 
                       WHERE  NVL(AdditionalProvforACCTIDRs, ' ') <> ' ' );
                  --UNION ALL
                  --Select Case When AccountId <> '' Then AccountID When CustomerID<>'' Then CustomerID When UCIC<> '' Then UCIC END AccountId , 'BusinessSegment' FieldName from AccountLevelApproachUpload_stg Where isnull(BusinessSegment,'')<>'' 
                  --UNION ALL
                  --Select Case When AccountId <> '' Then AccountID When CustomerID<>'' Then CustomerID When UCIC<> '' Then UCIC END AccountId , 'AssetClassification' FieldName from AccountLevelApproachUpload_stg Where isnull(AssetClassification,'')<>'' 
                  --Select 'tt_CollateralDetails_Upload_8', * from tt_CollateralDetails_Upload_8
                  --Select * from  tt_NEWTRANCHE_16
                  DBMS_OUTPUT.PUT_LINE('nanda3');
                  --select *
                  MERGE INTO B 
                  USING (SELECT B.ROWID row_id, A.ScreenFieldNo
                  FROM B ,MetaScreenFieldDetail A
                         JOIN tt_CollateralDetails_Upload_8 B   ON A.CtrlName = B.FieldName 
                   WHERE A.MenuId = v_MenuId
                    AND A.IsVisible = 'Y') src
                  ON ( B.ROWID = src.row_id )
                  WHEN MATCHED THEN UPDATE SET B.SrNo = src.ScreenFieldNo;
                  DBMS_OUTPUT.PUT_LINE('nanda4');
                  IF utils.object_id('TEMPDB..tt_NEWTRANCHE_16') IS NOT NULL THEN
                   EXECUTE IMMEDIATE ' TRUNCATE TABLE tt_NEWTRANCHE_16 ';
                  END IF;
                  DELETE FROM tt_NEWTRANCHE_16;
                  UTILS.IDENTITY_RESET('tt_NEWTRANCHE_16');

                  INSERT INTO tt_NEWTRANCHE_16 SELECT * 
                       FROM ( SELECT ss.AccountId ,
                                     utils.stuff(( SELECT ',' || US.SrNo 
                                                   FROM tt_CollateralDetails_Upload_8 US
                                                    WHERE  US.AccountId = ss.AccountId ), 1, 1, ' ') REPORTIDSLIST  
                              FROM AccountLevelApproachUpload_stg SS
                               WHERE  ss.AccountId <> ' '
                                GROUP BY ss.AccountId ) B
                       ORDER BY 1;
                  INSERT INTO tt_NEWTRANCHE_16
                    SELECT ss.CustomerID ,
                           utils.stuff(( SELECT ',' || US.SrNo 
                                         FROM tt_CollateralDetails_Upload_8 US
                                          WHERE  US.AccountId = ss.CustomerID ), 1, 1, ' ') REPORTIDSLIST  
                      FROM AccountLevelApproachUpload_stg SS
                     WHERE  ss.CustomerID <> ' '
                      GROUP BY ss.CustomerID
                      ORDER BY 1;
                  INSERT INTO tt_NEWTRANCHE_16
                    SELECT ss.UCIC ,
                           utils.stuff(( SELECT ',' || US.SrNo 
                                         FROM tt_CollateralDetails_Upload_8 US
                                          WHERE  US.AccountId = ss.UCIC ), 1, 1, ' ') REPORTIDSLIST  
                      FROM AccountLevelApproachUpload_stg SS
                     WHERE  ss.UCIC <> ' '
                      GROUP BY ss.UCIC
                      ORDER BY 1;
                  --Select 'tt_NEWTRANCHE_16',* from tt_NEWTRANCHE_16
                  --SELECT * 
                  MERGE INTO A 
                  USING (SELECT A.ROWID row_id, B.REPORTIDSLIST
                  FROM A ,RBL_MISDB_PROD.AcceleratedProvision_Mod A
                         JOIN tt_NEWTRANCHE_16 B   ON A.AccountId = B.AccountId 
                   WHERE A.EffectiveFromTimeKey <= v_Timekey
                    AND A.EffectiveToTimeKey >= v_Timekey
                    AND A.UploadID = v_ExcelUploadId) src
                  ON ( A.ROWID = src.row_id )
                  WHEN MATCHED THEN UPDATE SET A.ChangeField = src.REPORTIDSLIST;
                  MERGE INTO A 
                  USING (SELECT A.ROWID row_id, B.REPORTIDSLIST
                  FROM A ,RBL_MISDB_PROD.AcceleratedProvision_Mod A
                         JOIN tt_NEWTRANCHE_16 B   ON A.CustomerId = B.AccountId 
                   WHERE A.EffectiveFromTimeKey <= v_Timekey
                    AND A.EffectiveToTimeKey >= v_Timekey
                    AND A.UploadID = v_ExcelUploadId) src
                  ON ( A.ROWID = src.row_id )
                  WHEN MATCHED THEN UPDATE SET A.ChangeField = src.REPORTIDSLIST;
                  MERGE INTO A 
                  USING (SELECT A.ROWID row_id, B.REPORTIDSLIST
                  FROM A ,RBL_MISDB_PROD.AcceleratedProvision_Mod A
                         JOIN tt_NEWTRANCHE_16 B   ON A.UCICID = B.AccountId 
                   WHERE A.EffectiveFromTimeKey <= v_Timekey
                    AND A.EffectiveToTimeKey >= v_Timekey
                    AND A.UploadID = v_ExcelUploadId) src
                  ON ( A.ROWID = src.row_id )
                  WHEN MATCHED THEN UPDATE SET A.ChangeField = src.REPORTIDSLIST;
                  DBMS_OUTPUT.PUT_LINE(SQL%ROWCOUNT);
                  ---DELETE FROM STAGING DATA Sachin
                  DELETE AccountLevelApproachUpload_stg

                   WHERE  filname = v_FilePathUpload;

               END;
               END IF;

            END;
            END IF;
            ----RETURN @ExcelUploadId
            ----DECLARE @UniqueUploadID INT
            --SET 	@UniqueUploadID=(SELECT MAX(UniqueUploadID) FROM  ExcelUploadHistory)
            ----------------------01042021-------------
            IF ( v_OperationFlag = 16 ) THEN

             ----AUTHORIZE
            BEGIN
               UPDATE AcceleratedProvision_Mod
                  SET AuthorisationStatus = '1A',
                      ApprovedByFirstLevel = v_UserLoginID,
                      DateApprovedFirstLevel = SYSDATE
                WHERE  UploadID = v_UniqueUploadID;
               UPDATE ExcelUploadHistory
                  SET AuthorisationStatus = '1A',
                      ApprovedByFirstLevel = v_UserLoginID,
                      DateApprovedFirstLevel = SYSDATE
                WHERE  UniqueUploadID = v_UniqueUploadID
                 AND UploadType = 'Acce Provision Upload';

            END;
            END IF;
            --------------------------------------------
            IF ( v_OperationFlag = 20 ) THEN

             ----AUTHORIZE
            BEGIN
               UPDATE AcceleratedProvision_Mod
                  SET AuthorisationStatus = 'A',
                      ApprovedBy = v_UserLoginID,
                      DateApproved = SYSDATE
                WHERE  UploadId = v_UniqueUploadID;
               UPDATE AcceleratedProvision_Mod
                  SET AuthorisationStatus = 'A',
                      ApprovedBy = v_UserLoginID,
                      DateApproved = SYSDATE
                WHERE  UploadId = v_UniqueUploadID;
               MERGE INTO A 
               USING (SELECT A.ROWID row_id, A.EffectiveFromTimeKey - 1 AS EffectiveToTimeKey
               FROM A ,AcceleratedProvision A
                      JOIN AcceleratedProvision_Mod B   ON A.CustomerId = B.CustomerId 
                WHERE B.UploadID = v_UniqueUploadID) src
               ON ( A.ROWID = src.row_id )
               WHEN MATCHED THEN UPDATE SET A.EffectiveToTimeKey = src.EffectiveToTimeKey;
               MERGE INTO A 
               USING (SELECT A.ROWID row_id, A.EffectiveFromTimeKey - 1 AS EffectiveToTimeKey
               FROM A ,AcceleratedProvision A
                      JOIN AcceleratedProvision_Mod B   ON A.AccountId = B.AccountId 
                WHERE B.UploadID = v_UniqueUploadID) src
               ON ( A.ROWID = src.row_id )
               WHEN MATCHED THEN UPDATE SET A.EffectiveToTimeKey = src.EffectiveToTimeKey;
               MERGE INTO A 
               USING (SELECT A.ROWID row_id, A.EffectiveFromTimeKey - 1 AS EffectiveToTimeKey
               FROM A ,AcceleratedProvision A
                      JOIN AcceleratedProvision_Mod B   ON A.UCICID = B.UCICID 
                WHERE B.UploadID = v_UniqueUploadID) src
               ON ( A.ROWID = src.row_id )
               WHEN MATCHED THEN UPDATE SET A.EffectiveToTimeKey = src.EffectiveToTimeKey;
               INSERT INTO AcceleratedProvision
                 ( AcceleratedProvisionEntityID, CustomerId, AccountId, UCICID, AcceProDuration, EffectiveDate, Secured_Unsecured, AdditionalProvision, AdditionalProvACCT, CustomerEntityId, UcifEntityID, AccountEntityId, AuthorisationStatus, CreatedBy, DateCreated, EffectiveFromTimeKey, EffectiveToTimeKey, ModifiedBy, DateModified, ApprovedBy, DateApproved, CurrentProvisionPer, SegmentNameAlt_key, AssetClassNameAlt_key )
                 ( SELECT AcceleratedProvisionEntityID ,
                          CustomerId ,
                          AccountId ,
                          UCICID ,
                          AcceProDuration ,
                          EffectiveDate ,
                          Secured_Unsecured ,
                          AdditionalProvision ,
                          AdditionalProvACCT ,
                          CustomerEntityId ,
                          UcifEntityID ,
                          AccountEntityId ,
                          A.AuthorisationStatus ,
                          A.CreatedBy ,
                          A.DateCreated ,
                          v_Timekey ,
                          49999 ,
                          A.ModifiedBy ,
                          A.DateModified ,
                          v_UserLoginID ,
                          SYSDATE ,
                          CurrentProvisionPer ,
                          SegmentNameAlt_key ,
                          AssetClassNameAlt_key 
                   FROM AcceleratedProvision_Mod A
                    WHERE  A.UploadID = v_UniqueUploadID
                             AND A.EffectiveToTimeKey >= v_Timekey );
               ------------------------------------------------
               --Update A
               --SET A.CustomerEntityId=C.CustomerEntityId
               --From AcceleratedProvision A 
               --INNER Join [CurDat].[CustomerBasicDetail] C
               --ON A.CustomerId=C.CustomerID 
               --Left Join AcceleratedProvision_Mod D
               --ON A.CustomerId=D.CustomerID 
               --Where D.UploadID=@UniqueUploadID
               --Update A
               --SET A.UcifEntityID=C.UcifEntityID
               --From AcceleratedProvision A 
               --INNER Join [CurDat].[CustomerBasicDetail] C
               --ON A.UCICID=C.UCIF_ID 
               --Left Join AcceleratedProvision_Mod D
               --ON A.UCICID=D.UCICID 
               --Where D.UploadID=@UniqueUploadID
               --Update A
               --SET A.AccountEntityId=B.AccountEntityId
               --From AcceleratedProvision A 
               --INNER Join [CurDat].[AdvAcBasicDetail]  B
               --ON A.AccountId=B.CustomerACID 
               --Left Join AcceleratedProvision_Mod D
               --ON A.AccountId=B.CustomerACID 
               --Where D.UploadID=@UniqueUploadID
               UPDATE ExcelUploadHistory
                  SET AuthorisationStatus = 'A',
                      ApprovedBy = v_UserLoginID,
                      DateApproved = SYSDATE
                WHERE  EffectiveFromTimeKey <= v_Timekey
                 AND EffectiveToTimeKey >= v_Timekey
                 AND UniqueUploadID = v_UniqueUploadID
                 AND UploadType = 'Acce Provision Upload';

            END;
            END IF;
            IF ( v_OperationFlag = 17 ) THEN

             ----REJECT
            BEGIN
               UPDATE AcceleratedProvision_Mod
                  SET AuthorisationStatus = 'R',
                      ApprovedByFirstLevel = v_UserLoginID,
                      DateApprovedFirstLevel = SYSDATE,
                      EffectiveToTimeKey = EffectiveFromTimeKey - 1
                WHERE  UploadId = v_UniqueUploadID
                 AND AuthorisationStatus = 'NP';
               ----SELECT * FROM IBPCPoolDetail
               UPDATE ExcelUploadHistory
                  SET AuthorisationStatus = 'R',
                      ApprovedBy = v_UserLoginID,
                      DateApproved = SYSDATE
                WHERE  EffectiveFromTimeKey <= v_Timekey
                 AND EffectiveToTimeKey >= v_Timekey
                 AND UniqueUploadID = v_UniqueUploadID
                 AND UploadType = 'Acce Provision Upload';

            END;
            END IF;
            IF ( v_OperationFlag = 21 ) THEN

             ----REJECT
            BEGIN
               UPDATE AcceleratedProvision_Mod
                  SET AuthorisationStatus = 'R',
                      ApprovedBy = v_UserLoginID,
                      DateApproved = SYSDATE,
                      EffectiveToTimeKey = EffectiveFromTimeKey - 1
                WHERE  UploadId = v_UniqueUploadID
                 AND AuthorisationStatus IN ( 'NP','1A' )
               ;
               UPDATE AcceleratedProvision_Mod
                  SET AuthorisationStatus = 'R',
                      ApprovedBy = v_UserLoginID,
                      DateApproved = SYSDATE
                WHERE  UploadId = v_UniqueUploadID
                 AND AuthorisationStatus IN ( 'NP','1A' )
               ;
               ----SELECT * FROM IBPCPoolDetail
               UPDATE ExcelUploadHistory
                  SET AuthorisationStatus = 'R',
                      ApprovedBy = v_UserLoginID,
                      DateApproved = SYSDATE
                WHERE  EffectiveFromTimeKey <= v_Timekey
                 AND EffectiveToTimeKey >= v_Timekey
                 AND UniqueUploadID = v_UniqueUploadID
                 AND UploadType = 'Acce Provision Upload';

            END;
            END IF;

         END;
         END IF;
         --IF @OperationFlag IN (1,2,3,16,17,18,20,21) AND @AuthMode ='Y'
         --		BEGIN
         --					print 'log table'
         --					declare @DateCreated datetime
         --				SET	@DateCreated     =Getdate()
         --				--declare @ReferenceID1 varchar(max)
         --				--set @ReferenceID1 = (case when @OperationFlag in (16,20,21) then @UniqueUploadID else @ExcelUploadId end)
         --					IF @OperationFlag IN(16,17,18,20,21) 
         --						BEGIN 
         --						       Print 'Authorised'
         --								EXEC LogDetailsInsertUpdate_Attendence -- MAINTAIN LOG TABLE
         --							    @BranchCode=''   ,  ----BranchCode
         --								@MenuID=@MenuID,
         --								@ReferenceID=@UniqueUploadID ,-- ReferenceID ,
         --								@CreatedBy=NULL,
         --								@ApprovedBy=@UserLoginID, 
         --								@CreatedCheckedDt=@DateCreated,
         --								@Remark=NULL,
         --								@ScreenEntityAlt_Key=16  ,---ScreenEntityId -- for FXT060 screen
         --								@Flag=@OperationFlag,
         --								@AuthMode=@AuthMode
         --						END
         --					ELSE
         --						BEGIN
         --						       Print 'UNAuthorised'
         --						    -- Declare
         --						    -- set @CreatedBy  =@UserLoginID
         --							EXEC LogDetailsInsertUpdate_Attendence -- MAINTAIN LOG TABLE
         --								@BranchCode=''   ,  ----BranchCode
         --								@MenuID=@MenuID,
         --								@ReferenceID=@ExcelUploadId ,-- ReferenceID ,
         --								@CreatedBy=@UserLoginID,
         --								@ApprovedBy=NULL, 						
         --								@CreatedCheckedDt=@DateCreated,
         --								@Remark=NULL,
         --								@ScreenEntityAlt_Key=16  ,---ScreenEntityId -- for FXT060 screen
         --								@Flag=@OperationFlag,
         --								@AuthMode=@AuthMode
         --						END
         --		END
         --COMMIT TRAN
         ---SET @Result=CASE WHEN  @OperationFlag=1 THEN @UniqueUploadID ELSE 1 END
         v_Result := CASE 
                          WHEN v_OperationFlag = 1
                            AND v_MenuId = 24745 THEN v_ExcelUploadId
         ELSE 1
            END ;
         UPDATE UploadStatus
            SET InsertionOfData = 'Y',
                InsertionCompletedOn = SYSDATE
          WHERE  FileNames = v_filepath;
         BEGIN
            SELECT 1 INTO v_temp
              FROM DUAL
             WHERE EXISTS ( SELECT 1 
                            FROM AccountLevelApproachUpload_stg 
                             WHERE  filname = v_FilePathUpload );
         EXCEPTION
            WHEN OTHERS THEN
               NULL;
         END;

         IF v_temp = 1 THEN

         BEGIN
            --DELETE FROM AccountLevelApproachUpload_stg
            --WHERE filname=@FilePathUpload
            DBMS_OUTPUT.PUT_LINE(1);

         END;
         END IF;
         ----	 PRINT 'ROWS DELETED FROM IBPCPoolDetail_stg'+CAST(@@ROWCOUNT AS VARCHAR(100))
         RETURN v_Result;

      END;
   EXCEPTION
      WHEN OTHERS THEN

   BEGIN
      OPEN  v_cursor FOR
         SELECT SQLERRM ,
                utils.error_line 
           FROM DUAL  ;
         DBMS_SQL.RETURN_RESULT(v_cursor);
      v_Result := -1 ;
      UPDATE UploadStatus
         SET InsertionOfData = 'Y',
             InsertionCompletedOn = SYSDATE
       WHERE  FileNames = v_filepath;
      RETURN -1;

   END;END;

EXCEPTION WHEN OTHERS THEN utils.handleerror(SQLCODE,SQLERRM);
END;

/

  GRANT EXECUTE ON "RBL_MISDB_PROD"."ACCELERATEDPROVISIONDATAINUP_28072023" TO "ROLE_LOCAL_RBL_MISDB_PROD_ORACLE";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."ACCELERATEDPROVISIONDATAINUP_28072023" TO "PREMOC_RBL_MISDB_PROD";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."ACCELERATEDPROVISIONDATAINUP_28072023" TO "QPI_RBL_MISDB_PROD";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."ACCELERATEDPROVISIONDATAINUP_28072023" TO "ALERT_RBL_MISDB_PROD";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."ACCELERATEDPROVISIONDATAINUP_28072023" TO "DWH_RBL_MISDB_PROD";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."ACCELERATEDPROVISIONDATAINUP_28072023" TO "MAIN_PRO";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."ACCELERATEDPROVISIONDATAINUP_28072023" TO "D2KMNTR_RBL_MISDB_PROD";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."ACCELERATEDPROVISIONDATAINUP_28072023" TO "CURDAT_RBL_MISDB_PROD";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."ACCELERATEDPROVISIONDATAINUP_28072023" TO "BS_RBL_MISDB_PROD";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."ACCELERATEDPROVISIONDATAINUP_28072023" TO "ACL_RBL_MISDB_PROD";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."ACCELERATEDPROVISIONDATAINUP_28072023" TO "ETL_MAIN_RBL_MISDB_PROD";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."ACCELERATEDPROVISIONDATAINUP_28072023" TO "DATAUPLOAD_RBL_MISDB_PROD";
  GRANT DEBUG ON "RBL_MISDB_PROD"."ACCELERATEDPROVISIONDATAINUP_28072023" TO "ROLE_LOCAL_RBL_MISDB_PROD_ORACLE";
  GRANT DEBUG ON "RBL_MISDB_PROD"."ACCELERATEDPROVISIONDATAINUP_28072023" TO "PREMOC_RBL_MISDB_PROD";
  GRANT DEBUG ON "RBL_MISDB_PROD"."ACCELERATEDPROVISIONDATAINUP_28072023" TO "QPI_RBL_MISDB_PROD";
  GRANT DEBUG ON "RBL_MISDB_PROD"."ACCELERATEDPROVISIONDATAINUP_28072023" TO "ALERT_RBL_MISDB_PROD";
  GRANT DEBUG ON "RBL_MISDB_PROD"."ACCELERATEDPROVISIONDATAINUP_28072023" TO "DWH_RBL_MISDB_PROD";
  GRANT DEBUG ON "RBL_MISDB_PROD"."ACCELERATEDPROVISIONDATAINUP_28072023" TO "MAIN_PRO";
  GRANT DEBUG ON "RBL_MISDB_PROD"."ACCELERATEDPROVISIONDATAINUP_28072023" TO "D2KMNTR_RBL_MISDB_PROD";
  GRANT DEBUG ON "RBL_MISDB_PROD"."ACCELERATEDPROVISIONDATAINUP_28072023" TO "CURDAT_RBL_MISDB_PROD";
  GRANT DEBUG ON "RBL_MISDB_PROD"."ACCELERATEDPROVISIONDATAINUP_28072023" TO "BS_RBL_MISDB_PROD";
  GRANT DEBUG ON "RBL_MISDB_PROD"."ACCELERATEDPROVISIONDATAINUP_28072023" TO "ACL_RBL_MISDB_PROD";
  GRANT DEBUG ON "RBL_MISDB_PROD"."ACCELERATEDPROVISIONDATAINUP_28072023" TO "ETL_MAIN_RBL_MISDB_PROD";
  GRANT DEBUG ON "RBL_MISDB_PROD"."ACCELERATEDPROVISIONDATAINUP_28072023" TO "DATAUPLOAD_RBL_MISDB_PROD";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."ACCELERATEDPROVISIONDATAINUP_28072023" TO "ROLE_ALL_DB";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."ACCELERATEDPROVISIONDATAINUP_28072023" TO "CC_CDR_RBL_STGDB";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."ACCELERATEDPROVISIONDATAINUP_28072023" TO "RBL_BI_RBL_STGDB";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."ACCELERATEDPROVISIONDATAINUP_28072023" TO "BSG_READ_RBL_STGDB";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."ACCELERATEDPROVISIONDATAINUP_28072023" TO "STD_FIN_RBL_STGDB";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."ACCELERATEDPROVISIONDATAINUP_28072023" TO "RBL_STGDB";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."ACCELERATEDPROVISIONDATAINUP_28072023" TO "ETL_TEMP_RBL_TEMPDB";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."ACCELERATEDPROVISIONDATAINUP_28072023" TO "RBL_TEMPDB";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."ACCELERATEDPROVISIONDATAINUP_28072023" TO "STG_FIN_RBL_STGDB";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."ACCELERATEDPROVISIONDATAINUP_28072023" TO "ADF_CDR_RBL_STGDB";
  GRANT DEBUG ON "RBL_MISDB_PROD"."ACCELERATEDPROVISIONDATAINUP_28072023" TO "ROLE_ALL_DB";
  GRANT DEBUG ON "RBL_MISDB_PROD"."ACCELERATEDPROVISIONDATAINUP_28072023" TO "CC_CDR_RBL_STGDB";
  GRANT DEBUG ON "RBL_MISDB_PROD"."ACCELERATEDPROVISIONDATAINUP_28072023" TO "RBL_BI_RBL_STGDB";
  GRANT DEBUG ON "RBL_MISDB_PROD"."ACCELERATEDPROVISIONDATAINUP_28072023" TO "BSG_READ_RBL_STGDB";
  GRANT DEBUG ON "RBL_MISDB_PROD"."ACCELERATEDPROVISIONDATAINUP_28072023" TO "STD_FIN_RBL_STGDB";
  GRANT DEBUG ON "RBL_MISDB_PROD"."ACCELERATEDPROVISIONDATAINUP_28072023" TO "RBL_STGDB";
  GRANT DEBUG ON "RBL_MISDB_PROD"."ACCELERATEDPROVISIONDATAINUP_28072023" TO "ETL_TEMP_RBL_TEMPDB";
  GRANT DEBUG ON "RBL_MISDB_PROD"."ACCELERATEDPROVISIONDATAINUP_28072023" TO "RBL_TEMPDB";
  GRANT DEBUG ON "RBL_MISDB_PROD"."ACCELERATEDPROVISIONDATAINUP_28072023" TO "STG_FIN_RBL_STGDB";
  GRANT DEBUG ON "RBL_MISDB_PROD"."ACCELERATEDPROVISIONDATAINUP_28072023" TO "ADF_CDR_RBL_STGDB";
