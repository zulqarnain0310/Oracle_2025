--------------------------------------------------------
--  DDL for Function COLLETRALUPLOADDATAINUP_24012024
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_24012024" 
(
  iv_Timekey IN NUMBER,
  v_UserLoginID IN VARCHAR2,
  v_OperationFlag IN NUMBER,
  v_MenuId IN NUMBER,
  v_AuthMode IN CHAR,
  v_filepath IN VARCHAR2,
  iv_EffectiveFromTimeKey IN NUMBER,
  iv_EffectiveToTimeKey IN NUMBER,
  v_Result OUT NUMBER/* DEFAULT 0*/,
  v_UniqueUploadID IN NUMBER
)
RETURN NUMBER
AS
   v_Timekey NUMBER(10,0) := iv_Timekey;
   v_EffectiveFromTimeKey NUMBER(10,0) := iv_EffectiveFromTimeKey;
   v_EffectiveToTimeKey NUMBER(10,0) := iv_EffectiveToTimeKey;
   v_temp NUMBER(1, 0) := 0;
   v_cursor SYS_REFCURSOR;
--@Authlevel varchar(5)
--DECLARE @Timekey INT=24928,
--	@UserLoginID VARCHAR(100)='FNAOPERATOR',
--	@OperationFlag INT=1,
--	@MenuId INT=163,
--	@AuthMode	CHAR(1)='N',
--	@filepath VARCHAR(MAX)='',
--	@EffectiveFromTimeKey INT=24928,
--	@EffectiveToTimeKey	INT=49999,
--    @Result		INT=0 ,
--	@UniqueUploadID INT=41

BEGIN

   /*TODO:SQLDEV*/ SET DATEFORMAT DMY /*END:SQLDEV*/
   BEGIN
      SELECT 1 INTO v_temp
        FROM DUAL
       WHERE EXISTS ( SELECT 1 
                      FROM ACLProcessInProgressStatus 
                       WHERE  STATUS = 'RUNNING'
                                AND StatusFlag = 'N'
                                AND TimeKey IN ( SELECT MAX(Timekey)  
                                                 FROM ACLProcessInProgressStatus  )
    );
   EXCEPTION
      WHEN OTHERS THEN
         NULL;
   END;

   IF v_temp = 1 THEN

   BEGIN
      DBMS_OUTPUT.PUT_LINE('ACL Process is In Progress');

   END;

   --IF EXISTS(SELECT 1 FROM ACLProcessInProgressStatus WHERE Status='COMPLETED' AND StatusFlag='Y' AND TimeKey in (select max(Timekey) from ACLProcessInProgressStatus) )

   --BEGIN

   --	PRINT 'ACL Process Completed'
   ELSE
   DECLARE
      v_CollIDAutoGenerated NUMBER(10,0);
      v_CollateralID VARCHAR2(30) := ' ';
      v_FilePathUpload VARCHAR2(100);

   BEGIN
      --DECLARE @Timekey INT
      --SET @Timekey=(SELECT MAX(TIMEKEY) FROM dbo.SysProcessingCycle
      --	WHERE ProcessType='Quarterly')
      SELECT UTILS.CONVERT_TO_NUMBER(B.timekey,10,0) 

        INTO v_Timekey
        FROM SysDataMatrix A
               JOIN SysDayMatrix B   ON A.TimeKey = B.TimeKey
       WHERE  A.CurrentStatus = 'C';
      DBMS_OUTPUT.PUT_LINE(v_TIMEKEY);
      v_EffectiveFromTimeKey := v_TimeKey ;
      v_EffectiveToTimeKey := 49999 ;
      v_FilePathUpload := v_UserLoginId || '_' || v_filepath ;
      DBMS_OUTPUT.PUT_LINE('@FilePathUpload');
      DBMS_OUTPUT.PUT_LINE(v_FilePathUpload);
      BEGIN
         DECLARE
            v_temp NUMBER(1, 0) := 0;

         BEGIN
            --BEGIN TRAN
            IF ( v_MenuId = 24702 ) THEN

            BEGIN
               --Set @FilePathUpload='mismaker_CollateralUpload_3.xlsx'
               IF ( v_OperationFlag = 1 ) THEN
                DECLARE
                  v_temp NUMBER(1, 0) := 0;

               BEGIN
                  BEGIN
                     SELECT 1 INTO v_temp
                       FROM DUAL
                      WHERE NOT ( EXISTS ( SELECT 1 
                                           FROM CollateralDetails_stg 
                                            WHERE  filname = v_FilePathUpload ) );
                  EXCEPTION
                     WHEN OTHERS THEN
                        NULL;
                  END;

                  IF v_temp = 1 THEN

                  BEGIN
                     --Rollback tran
                     v_Result := -8 ;
                     RETURN v_Result;

                  END;
                  END IF;
                  DBMS_OUTPUT.PUT_LINE('Sachin');
                  BEGIN
                     SELECT 1 INTO v_temp
                       FROM DUAL
                      WHERE EXISTS ( SELECT 1 
                                     FROM CollateralDetails_stg 
                                      WHERE  filname = v_FilePathUpload );
                  EXCEPTION
                     WHEN OTHERS THEN
                        NULL;
                  END;

                  IF v_temp = 1 THEN
                   DECLARE
                     --sp
                     v_ExcelUploadId NUMBER(10,0);

                  BEGIN
                     INSERT INTO ExcelUploadHistory
                       ( UploadedBy, DateofUpload, AuthorisationStatus
                     --,Action	
                     , UploadType, EffectiveFromTimeKey, EffectiveToTimeKey, CreatedBy, DateCreated )
                       ( SELECT v_UserLoginID ,
                                SYSDATE ,
                                'NP' ,
                                --,'NP'
                                'Colletral Upload' ,
                                v_EffectiveFromTimeKey ,
                                v_EffectiveToTimeKey ,
                                v_UserLoginID ,
                                SYSDATE 
                           FROM DUAL  );
                     DBMS_OUTPUT.PUT_LINE(SQL%ROWCOUNT);
                     SELECT MAX(UniqueUploadID)  

                       INTO v_ExcelUploadId
                       FROM ExcelUploadHistory ;
                     INSERT INTO UploadStatus
                       ( FileNames, UploadedBy, UploadDateTime, UploadType )
                       VALUES ( v_filepath, v_UserLoginID, TO_DATE(SYSDATE,'dd/mm/yyyy'), 'Colletral Upload' );
                     v_CollIDAutoGenerated := 0 ;
                     SELECT MAX(UTILS.CONVERT_TO_NUMBER(NVL(CollateralID, 0),10,0))  

                       INTO v_CollIDAutoGenerated
                       FROM ( SELECT MAX(UTILS.CONVERT_TO_NUMBER(NVL(CollateralID, 0),10,0))  CollateralID  
                              FROM CurDat_RBL_MISDB_PROD.AdvSecurityDetail 
                              UNION ALL 
                              SELECT MAX(UTILS.CONVERT_TO_NUMBER(NVL(CollateralID, 0),10,0))  CollateralID  
                              FROM RBL_MISDB_PROD.AdvSecurityDetail_Mod 
                              UNION ALL 
                              SELECT MAX(UTILS.CONVERT_TO_NUMBER(NVL(CollateralID, 0),10,0))  CollateralID  
                              FROM CurDat_RBL_MISDB_PROD.AdvSecurityValueDetail 
                              UNION ALL 
                              SELECT MAX(UTILS.CONVERT_TO_NUMBER(NVL(CollateralID, 0),10,0))  CollateralID  
                              FROM RBL_MISDB_PROD.AdvSecurityValueDetail_Mod 
                              UNION ALL 
                              SELECT MAX(UTILS.CONVERT_TO_NUMBER(NVL(CollateralID, 0),10,0))  CollateralID  
                              FROM RBL_MISDB_PROD.CollateralMgmtUpload_Mod  ) X;
                     IF ( v_CollIDAutoGenerated = 0 ) THEN
                      v_CollIDAutoGenerated := 1000001 ;
                     ELSE
                        v_CollIDAutoGenerated := UTILS.CONVERT_TO_NUMBER(v_CollIDAutoGenerated,10,0) + 1 ;
                     END IF;
                     --Print '@CollIDAutoGenerated'
                     --Print @CollIDAutoGenerated
                     v_CollateralID := UTILS.CONVERT_TO_VARCHAR2(v_CollIDAutoGenerated,30) ;
                     DBMS_OUTPUT.PUT_LINE('SachinModInsert                                                                                                                                                                                                                                   







                                                                                    8');
                     DBMS_OUTPUT.PUT_LINE('@CollateralID');
                     DBMS_OUTPUT.PUT_LINE(v_CollateralID);
                     DBMS_OUTPUT.PUT_LINE('@ExcelUploadId');
                     DBMS_OUTPUT.PUT_LINE(v_ExcelUploadId);
                     DBMS_OUTPUT.PUT_LINE('@FilePathUpload');
                     DBMS_OUTPUT.PUT_LINE(v_FilePathUpload);
                     /*TODO:SQLDEV*/ SET dateformat DMY /*END:SQLDEV*/
                     INSERT INTO CollateralMgmtUpload_Mod
                       ( SrNo, UploadID, OldCollateralID, CollateralID, TaggingLevel, Related_UCIC_CustomerID_AccountID, DistributionLevel, DistributionValue, CollateralType, CollateralSubType, CollateralOwnerType, CollateralOwnershipType, ChargeType, ChargeNature, ShareAvailableToBank, ShareValue, CollateralValueSanctionRs, CollateralValueNPADateRs, CollateralValueLastReviewRs, ValuationDate, CurrentCollateralValueRs, ExpiryBusinessRule, CreatedBy, DateCreated, AuthorisationStatus, EffectiveFromTimeKey, EffectiveToTimeKey )
                       SELECT SrNo ,
                              v_ExcelUploadId ,
                              OldCollateralID ,
                              v_CollateralID + ROW_NUMBER() OVER ( ORDER BY ( SELECT 1 
                                                                                FROM DUAL  )  ) ,
                              TaggingLevel ,
                              RelatedUCICCustomerIDAccountID ,
                              DistributionLevel ,
                              CASE 
                                   WHEN NVL(DistributionValue, ' ') = ' ' THEN NULL
                              ELSE UTILS.CONVERT_TO_NUMBER(NVL(DistributionValue, 0),16,2)
                                 END DistributionValue  ,
                              CollateralType ,
                              CollateralSubType ,
                              CollateralOwnerType ,
                              CollateralOwnershipType ,
                              ChargeType ,
                              ChargeNature ,
                              ShareAvailableToBank ,
                              ShareValue ,
                              CollateralValueatSanctioninRs ,
                              CollateralValueasonNPADateinRs ,
                              CollateralValueatLastReviewinRs ,
                              CASE 
                                   WHEN ValuationDate <> ' ' THEN UTILS.CONVERT_TO_VARCHAR2(ValuationDate,200)
                              ELSE NULL
                                 END ValuationDate  ,
                              CurrentCollateralValueinRs ,
                              ExpiryBusinessRule ,
                              v_UserLoginID ,
                              SYSDATE ,
                              'NP' ,
                              v_Timekey ,
                              49999 
                         FROM CollateralDetails_stg 
                        WHERE  filname = v_FilePathUpload;
                     DBMS_OUTPUT.PUT_LINE(SQL%ROWCOUNT);
                     --Declare @SummaryId int
                     --Set @SummaryId=IsNull((Select Max(SummaryId) from IBPCPoolSummary_Mod),0)
                     --INSERT INTO IBPCPoolSummary_stg
                     --(
                     --	UploadID
                     --	,SummaryID
                     --	,PoolID
                     --	,PoolName
                     --	,PoolType
                     --	,BalanceOutstanding
                     --	,NoOfAccount
                     --	,IBPCExposureAmt
                     --	,IBPCReckoningDate
                     --	,IBPCMarkingDate
                     --	,MaturityDate
                     --	,TotalPosBalance
                     --	,TotalInttReceivable
                     --)
                     --SELECT
                     --	@ExcelUploadId
                     --	,@SummaryId+Row_Number() over(Order by PoolID)
                     --	,PoolID
                     --	,PoolName
                     --	,PoolType
                     --	,Sum(IsNull(Cast(PrincipalOutstandinginRs as decimal(16,2)),0)+IsNull(Cast(InterestReceivableinRs as Decimal(16,2)),0))
                     --	,Count(PoolID)
                     --	,SUM(ISNULL(Cast(IBPCExposureinRs as Decimal(16,2)),0))
                     --	,DateofIBPCreckoning
                     --	,DateofIBPCmarking
                     --	,MaturityDate
                     --	,Sum(IsNull(Cast(PrincipalOutstandinginRs as decimal(16,2)),0))
                     --	,Sum(IsNull(Cast(InterestReceivableinRs as Decimal(16,2)),0))
                     --FROM IBPCPoolDetail_stg
                     --where FilName=@FilePathUpload
                     --Group by PoolID,PoolName,PoolType,DateofIBPCreckoning,DateofIBPCmarking,MaturityDate
                     --INSERT INTO IBPCPoolSummary_Mod
                     --(
                     --	UploadID
                     --	,SummaryID
                     --	,PoolID
                     --	,PoolName
                     --	,BalanceOutstanding
                     --	,NoOfAccount
                     --	,AuthorisationStatus	
                     --	,EffectiveFromTimeKey	
                     --	,EffectiveToTimeKey	
                     --	,CreatedBy	
                     --	,DateCreated	
                     --)
                     --SELECT
                     --	@ExcelUploadId
                     --	,@SummaryId+Row_Number() over(Order by PoolID)
                     --	,PoolID
                     --	,PoolName
                     --	,Sum(IsNull(POS,0)+IsNull(InterestReceivable,0))
                     --	,Count(PoolID)
                     --	,'NP'	
                     --	,@Timekey
                     --	,49999	
                     --	,@UserLoginID	
                     --	,GETDATE()
                     --FROM IBPCPoolDetail_stg
                     --where FilName=@FilePathUpload
                     --Group by PoolID,PoolName
                     ---DELETE FROM STAGING DATA Sachin
                     DELETE CollateralDetails_stg

                      WHERE  filname = v_FilePathUpload;

                  END;
                  END IF;

               END;
               END IF;
               ----RETURN @ExcelUploadId
               ----DECLARE @UniqueUploadID INT
               --SET 	@UniqueUploadID=(SELECT MAX(UniqueUploadID) FROM  ExcelUploadHistory)
               ----------------------01042021-------------
               IF ( v_OperationFlag = 16 ) THEN

                ----AUTHORIZE
               BEGIN
                  UPDATE CollateralMgmtUpload_Mod
                     SET AuthorisationStatus = '1A',
                         ApprovedBy = v_UserLoginID,
                         DateApproved = SYSDATE
                   WHERE  UploadID = v_UniqueUploadID;
                  UPDATE CollateralMgmtUpload_Mod
                     SET AuthorisationStatus = '1A',
                         ApprovedBy = v_UserLoginID,
                         DateApproved = SYSDATE
                   WHERE  UploadId = v_UniqueUploadID;
                  UPDATE ExcelUploadHistory
                     SET AuthorisationStatus = '1A',
                         ApprovedBy = v_UserLoginID
                   WHERE  UniqueUploadID = v_UniqueUploadID
                    AND UploadType = 'Colletral Upload';

               END;
               END IF;
               --------------------------------------------
               IF ( v_OperationFlag = 20 ) THEN
                DECLARE
                  --	INSERT INTO [CollateralMgmt]
                  --(
                  --	OldCollateralID,
                  --	TaggingAlt_Key,
                  --	AccountID,
                  --	UCICID,
                  --	CustomerID,
                  --	DistributionAlt_Key,
                  --	CollateralTypeAlt_Key,
                  --	CollateralSubTypeAlt_Key,
                  --	CollateralOwnerTypeAlt_Key,
                  --	CollateralOwnerShipTypeAlt_Key,
                  --	ChargeTypeAlt_Key,
                  --	ChargeNatureAlt_Key,
                  --	ShareAvailabletoBankAlt_Key,
                  --	CollateralShareamount,
                  --    AuthorisationStatus,
                  --     EffectiveFromTimeKey,
                  --	EffectiveToTimeKey,
                  --	CreatedBy,
                  --	DateCreated,
                  --	ModifiedBy,
                  --	DateModified,
                  --	ApprovedBy,
                  --	DateApproved																					
                  --)
                  v_SecurityEntityID NUMBER(19,0);
                  ----------------------------------------------------------------
                  v_SecurityEntityID1 NUMBER(19,0);

                ----AUTHORIZE
               BEGIN
                  UPDATE CollateralMgmtUpload_Mod
                     SET AuthorisationStatus = 'A',
                         ApprovedBy = v_UserLoginID,
                         DateApproved = SYSDATE
                   WHERE  UploadId = v_UniqueUploadID;
                  UPDATE CollateralMgmtUpload_Mod
                     SET AuthorisationStatus = 'A',
                         ApprovedBy = v_UserLoginID,
                         DateApproved = SYSDATE
                   WHERE  UploadId = v_UniqueUploadID;
                  SELECT MAX(NVL(SecurityEntityID, 0))  

                    INTO v_SecurityEntityID
                    FROM CurDat_RBL_MISDB_PROD.AdvSecurityDetail ;
                  IF ( v_SecurityEntityID IS NULL ) THEN

                  BEGIN
                     v_SecurityEntityID := 1 ;

                  END;
                  ELSE
                     v_SecurityEntityID := v_SecurityEntityID + 1 ;
                  END IF;
                  DBMS_OUTPUT.PUT_LINE('@SecurityEntityID');
                  DBMS_OUTPUT.PUT_LINE(v_SecurityEntityID);
                  INSERT INTO CurDat_RBL_MISDB_PROD.AdvSecurityDetail
                    ( CollateralID, Security_RefNo, TaggingAlt_Key, RefSystemAcId, UCICID, RefCustomerId, DistributionAlt_Key, SecurityAlt_Key, CollateralSubTypeAlt_Key, OwnerTypeAlt_Key, CollateralOwnerShipTypeAlt_Key, SecurityChargeTypeAlt_Key, ChargeNatureAlt_Key, ShareAvailabletoBankAlt_Key, CollateralShareamount, CollateralValueatSanctioninRs, CollateralValueasonNPAdateinRs, SecurityEntityID, AuthorisationStatus, EffectiveFromTimeKey, EffectiveToTimeKey, CreatedBy, DateCreated, ModifiedBy, DateModified, ApprovedBy, DateApproved, IfPercentagevalue_or_Absolutevalue )
                    SELECT CollateralID ,
                           OldCollateralID ,
                           CASE 
                                WHEN TaggingLevel = 'CustomerID' THEN 1
                                WHEN TaggingLevel = 'AccountID' THEN 2
                                WHEN TaggingLevel = 'UCIC' THEN 4
                           ELSE ' '
                              END col  ,
                           CASE 
                                WHEN TaggingLevel = 'AccountID' THEN Related_UCIC_CustomerID_AccountID
                           ELSE ' '
                              END AccountID  ,
                           CASE 
                                WHEN TaggingLevel = 'UCIC' THEN Related_UCIC_CustomerID_AccountID
                           ELSE ' '
                              END UCICID  ,
                           CASE 
                                WHEN TaggingLevel = 'CustomerID' THEN Related_UCIC_CustomerID_AccountID
                           ELSE ' '
                              END CustomerID  ,
                           K.ParameterAlt_Key DistributionAlt_Key  ,
                           B.CollateralTypeAltKey ,
                           NULL ,--C.CollateralSubTypeAltKey

                           D.CollateralOwnerTypeAltKey ,
                           I.ParameterAlt_Key CollateralOwnerShipTypeAlt_Key  ,
                           F.CollateralChargeTypeAltKey ,
                           G.SecurityChargeTypeAlt_Key ,
                           H.ParameterAlt_Key ShareAvailabletoBankAlt_Key  ,
                           ShareValue ,
                           CollateralValueSanctionRs ,
                           CollateralValueNPADateRs ,
                           v_SecurityEntityID + ROW_NUMBER() OVER ( ORDER BY ( SELECT 1 
                                                                                 FROM DUAL  )  ) ,
                           A.AuthorisationStatus ,
                           v_Timekey ,
                           49999 ,
                           A.CreatedBy ,
                           A.DateCreated ,
                           A.ModifiedBy ,
                           A.DateModified ,
                           v_UserLoginID ,
                           SYSDATE ,
                           DistributionValue 
                      FROM CollateralMgmtUpload_Mod A
                             LEFT JOIN DimCollateralType B   ON A.CollateralType = B.CollateralTypeDescription
                           --LEFT JOIN DimCollateralSubType C ON A.CollateralSubType=C.CollateralSubTypeDescription

                             LEFT JOIN DimCollateralOwnerType D   ON A.CollateralOwnerType = D.CollOwnerDescription
                             LEFT JOIN DimCollateralChargeType F   ON A.ChargeType = F.CollChargeDescription
                             LEFT JOIN DimSecurityChargeType G   ON A.ChargeNature = G.SecurityChargeTypeName
                             AND G.SecurityChargeTypeGroup = 'COLLATERAL'
                             LEFT JOIN ( SELECT ParameterAlt_Key ,
                                                ParameterName ,
                                                'ShareAvailabletoBank' Tablename  
                                         FROM DimParameter 
                                          WHERE  DimParameterName = 'CollateralBank'
                                                   AND EffectiveFromTimeKey <= v_TimeKey
                                                   AND EffectiveToTimeKey >= v_TimeKey ) H   ON H.ParameterName = A.ShareAvailableToBank
                             LEFT JOIN ( SELECT ParameterAlt_Key ,
                                                ParameterName ,
                                                'CollateralOwnershipType' Tablename  
                                         FROM DimParameter 
                                          WHERE  DimParameterName = 'CollateralOwnershipType'
                                                   AND EffectiveFromTimeKey <= v_TimeKey
                                                   AND EffectiveToTimeKey >= v_TimeKey ) I   ON I.ParameterName = A.CollateralOwnershipType
                             LEFT JOIN ( SELECT ParameterAlt_Key ,
                                                ParameterName ,
                                                'DistributionModel' Tablename  
                                         FROM DimParameter 
                                          WHERE  DimParameterName = 'Collateral'
                                                   AND EffectiveFromTimeKey <= v_TimeKey
                                                   AND EffectiveToTimeKey >= v_TimeKey ) K   ON K.ParameterName = A.DistributionLevel
                     WHERE  A.UploadID = v_UniqueUploadID
                              AND A.EffectiveToTimeKey >= v_Timekey;
                  ------------------------------------------------
                  MERGE INTO A 
                  USING (SELECT A.ROWID row_id, D.CollateralSubTypeAltKey
                  FROM A ,CurDat_RBL_MISDB_PROD.AdvSecurityDetail A
                         JOIN CollateralMgmtUpload_Mod B   ON A.CollateralID = B.CollateralID
                         JOIN DimCollateralType C   ON A.SecurityAlt_Key = C.CollateralTypeAltKey
                         JOIN DimCollateralSubType D   ON B.CollateralSubType = D.CollateralSubTypeDescription 
                   WHERE B.UploadID = v_UniqueUploadID
                    AND D.CollateralTypeAltKey = C.CollateralTypeAltKey) src
                  ON ( A.ROWID = src.row_id )
                  WHEN MATCHED THEN UPDATE SET A.CollateralSubTypeAlt_Key = src.CollateralSubTypeAltKey;
                  MERGE INTO CurDat_RBL_MISDB_PROD.AdvSecurityDetail 
                  USING (SELECT CurDat_RBL_MISDB_PROD.AdvSecurityDetail.ROWID row_id, C.CustomerName, c.CustomerEntityId
                  FROM CurDat_RBL_MISDB_PROD.AdvSecurityDetail A
                         JOIN CurDat_RBL_MISDB_PROD.CustomerBasicDetail C   ON A.RefCustomerId = C.CustomerID
                         AND A.TaggingAlt_Key = 1
                         LEFT JOIN CollateralMgmtUpload_Mod B   ON A.CollateralID = B.CollateralID 
                   WHERE B.UploadID = v_UniqueUploadID) src
                  ON ( CurDat_RBL_MISDB_PROD.AdvSecurityDetail.ROWID = src.row_id )
                  WHEN MATCHED THEN UPDATE SET CustomerName = src.CustomerName,
                                               CustomerEntityId = src.CustomerEntityId;
                  MERGE INTO CurDat_RBL_MISDB_PROD.AdvSecurityDetail 
                  USING (SELECT CurDat_RBL_MISDB_PROD.AdvSecurityDetail.ROWID row_id, C.CustomerName, c.CustomerEntityId
                  FROM CurDat_RBL_MISDB_PROD.AdvSecurityDetail A
                         JOIN CurDat_RBL_MISDB_PROD.CustomerBasicDetail C   ON A.UCICID = C.UCIF_ID
                         AND A.TaggingAlt_Key = 4
                         LEFT JOIN CollateralMgmtUpload_Mod B   ON A.CollateralID = B.CollateralID 
                   WHERE B.UploadID = v_UniqueUploadID) src
                  ON ( CurDat_RBL_MISDB_PROD.AdvSecurityDetail.ROWID = src.row_id )
                  WHEN MATCHED THEN UPDATE SET CustomerName = src.CustomerName,
                                               CustomerEntityId = src.CustomerEntityId;
                  MERGE INTO CurDat_RBL_MISDB_PROD.AdvSecurityDetail 
                  USING (SELECT CurDat_RBL_MISDB_PROD.AdvSecurityDetail.ROWID row_id, C.CustomerName, c.CustomerEntityId
                  FROM CurDat_RBL_MISDB_PROD.AdvSecurityDetail A
                         JOIN CurDat_RBL_MISDB_PROD.CustomerBasicDetail C   ON A.UCICID = C.UCIF_ID
                         AND A.TaggingAlt_Key = 4
                         AND A.RefCustomerId = C.CustomerID
                         LEFT JOIN CollateralMgmtUpload_Mod B   ON A.CollateralID = B.CollateralID 
                   WHERE B.UploadID = v_UniqueUploadID) src
                  ON ( CurDat_RBL_MISDB_PROD.AdvSecurityDetail.ROWID = src.row_id )
                  WHEN MATCHED THEN UPDATE SET CustomerName = src.CustomerName,
                                               CustomerEntityId = src.CustomerEntityId;
                  MERGE INTO CurDat_RBL_MISDB_PROD.AdvSecurityDetail 
                  USING (SELECT CurDat_RBL_MISDB_PROD.AdvSecurityDetail.ROWID row_id, C.CustomerName, c.CustomerEntityId
                  FROM CurDat_RBL_MISDB_PROD.AdvSecurityDetail A
                         JOIN CurDat_RBL_MISDB_PROD.AdvAcBasicDetail B   ON A.RefSystemAcId = B.CustomerACID
                         JOIN CurDat_RBL_MISDB_PROD.CustomerBasicDetail C   ON B.REfcustomerID = C.CustomerID
                         LEFT JOIN CollateralMgmtUpload_Mod D   ON A.CollateralID = D.CollateralID 
                   WHERE D.UploadID = v_UniqueUploadID
                    AND A.TaggingAlt_Key = 2) src
                  ON ( CurDat_RBL_MISDB_PROD.AdvSecurityDetail.ROWID = src.row_id )
                  WHEN MATCHED THEN UPDATE SET CustomerName = src.CustomerName,
                                               CustomerEntityId = src.CustomerEntityId;
                  SELECT MAX(NVL(SecurityEntityID, 0))  

                    INTO v_SecurityEntityID1
                    FROM CurDat_RBL_MISDB_PROD.AdvSecurityValueDetail ;
                  IF ( v_SecurityEntityID1 IS NULL ) THEN

                  BEGIN
                     v_SecurityEntityID1 := 1 ;

                  END;
                  ELSE
                     v_SecurityEntityID1 := v_SecurityEntityID1 + 1 ;
                  END IF;
                  /*TODO:SQLDEV*/ INSERT INTO [Cur /*END:SQLDEV*/
                  INSERT INTO CurDat_RBL_MISDB_PROD.AdvSecurityValueDetail
                    ( CollateralID, CollateralValueatthetimeoflastreviewinRs, ValuationDate, CurrentValue, ExpiryBusinessRule, Periodinmonth, ValuationExpiryDate, SecurityEntityID, EffectiveFromTimeKey, EffectiveToTimeKey, CreatedBy, DateCreated, ModifiedBy, DateModified, ApprovedBy, DateApproved, AuthorisationStatus )
                    SELECT CollateralID ,
                           CollateralValueLastReviewRs ,
                           ValuationDate ,
                           CurrentCollateralValueRs ,
                           ExpiryBusinessRule ,
                           Periodinmonth ,
                           ValuationExpiryDate ,
                           SecurityEntityID ,
                           EffectiveFromTimeKey ,
                           EffectiveToTimeKey ,
                           CreatedBy ,
                           DateCreated ,
                           ModifiedBy ,
                           DateModified ,
                           UserNm ,
                           Userdt ,
                           AuthorisationStatus 
                      FROM ( SELECT ROW_NUMBER() OVER ( PARTITION BY A.CollateralID ORDER BY A.CollateralID  ) Rownumber  ,
                                    CollateralID ,
                                    CollateralValueLastReviewRs ,
                                    ValuationDate ,
                                    CurrentCollateralValueRs ,
                                    D.ValueExpirationAltKey ExpiryBusinessRule  ,
                                    D.ExpirationPeriod Periodinmonth  ,
                                    CASE 
                                         WHEN D.ExpirationPeriod <> 0 THEN utils.dateadd('M', UTILS.CONVERT_TO_NUMBER(D.ExpirationPeriod,10,0), A.ValuationDate)
                                    ELSE A.ValuationDate
                                       END ValuationExpiryDate  ,
                                    v_SecurityEntityID1 + ROW_NUMBER() OVER ( ORDER BY ( SELECT 1 
                                                                                           FROM DUAL  )  ) SecurityEntityID  ,
                                    v_Timekey EffectiveFromTimeKey  ,
                                    49999 EffectiveToTimeKey  ,
                                    A.CreatedBy ,
                                    A.DateCreated ,
                                    A.ModifiedBy ,
                                    A.DateModified ,
                                    v_UserLoginID UserNm  ,
                                    SYSDATE Userdt  ,
                                    a.AuthorisationStatus 
                             FROM CollateralMgmtUpload_Mod A
                                    LEFT JOIN DimValueExpiration D   ON A.ExpiryBusinessRule = D.Documents
                                    LEFT JOIN DimCollateralType B   ON A.CollateralType = B.CollateralTypeDescription
                                    LEFT JOIN DimCollateralSubType C   ON A.CollateralSubType = C.CollateralSubTypeDescription
                              WHERE  A.UploadID = v_UniqueUploadID
                                       AND A.EffectiveToTimeKey >= v_Timekey
                                       AND B.CollateralTypeAltKey = D.SecurityTypeAlt_Key ) X
                     WHERE  X.Rownumber = 1;
                  -----------------Insert into Final Tables ----------
                  -----Summary Final -----------
                  /*--------------------Adding Flag To AdvAcOtherDetail------------Sunil 21-03-2021--------*/
                  -- UPDATE A
                  --SET  
                  --       A.SplFlag=CASE WHEN ISNULL(A.SplFlag,'')='' THEN 'IBPC'     
                  --					ELSE A.SplFlag+','+'IBPC'     END
                  -- FROM DBO.AdvAcOtherDetail A
                  --  --INNER JOIN #Temp V  ON A.AccountEntityId=V.AccountEntityId
                  -- INNER JOIN CollateralMgmtUpload_Mod B ON A.OldCollateralID=B.OldCollateralID
                  --		WHERE  B.UploadId=@UniqueUploadID and B.EffectiveToTimeKey>=@Timekey
                  --		AND A.EffectiveToTimeKey=49999
                  --------------------------
                  --1
                  --select *from ExceptionFinalStatusType
                  --select * from AdvAcOtherDetail
                  --select * from IBPCFinalPoolDetail 
                  --alter table IBPCFinalPoolDetail
                  --add IBPCOutDate date,IBPCInDate Date
                  --update 
                  -------------------------------------------
                  --		UPDATE A
                  --		SET 
                  ----A.POS=ROUND(B.POS,2),
                  --		a.ModifiedBy=@UserLoginID
                  --		,a.DateModified=GETDATE()
                  --		FROM CollateralMgmt A
                  --		INNER JOIN CollateralMgmtUpload_Mod
                  -- B ON (A.EffectiveFromTimeKey<=@Timekey AND A.EffectiveToTimeKey>=@Timekey)
                  --															AND  (B.EffectiveFromTimeKey<=@Timekey AND B.EffectiveToTimeKey>=@Timekey)	
                  --															AND A.OldCollateralID=B.OldCollateralID
                  --WHERE B.AuthorisationStatus='A'
                  --AND B.UploadId=@UniqueUploadID
                  UPDATE ExcelUploadHistory
                     SET AuthorisationStatus = 'A',
                         ApprovedBy = v_UserLoginID,
                         DateApproved = SYSDATE
                   WHERE  EffectiveFromTimeKey <= v_Timekey
                    AND EffectiveToTimeKey >= v_Timekey
                    AND UniqueUploadID = v_UniqueUploadID
                    AND UploadType = 'Colletral Upload';

               END;
               END IF;
               IF ( v_OperationFlag = 17 ) THEN

                ----REJECT
               BEGIN
                  UPDATE CollateralMgmtUpload_Mod
                     SET AuthorisationStatus = 'R',
                         ApprovedBy = v_UserLoginID,
                         DateApproved = SYSDATE
                   WHERE  UploadId = v_UniqueUploadID
                    AND AuthorisationStatus = 'NP';
                  UPDATE CollateralMgmtUpload_Mod
                     SET AuthorisationStatus = 'R',
                         ApprovedBy = v_UserLoginID,
                         DateApproved = SYSDATE
                   WHERE  UploadId = v_UniqueUploadID
                    AND AuthorisationStatus = 'NP';
                  ----SELECT * FROM IBPCPoolDetail
                  UPDATE ExcelUploadHistory
                     SET AuthorisationStatus = 'R',
                         ApprovedBy = v_UserLoginID,
                         DateApproved = SYSDATE
                   WHERE  EffectiveFromTimeKey <= v_Timekey
                    AND EffectiveToTimeKey >= v_Timekey
                    AND UniqueUploadID = v_UniqueUploadID
                    AND UploadType = 'Colletral Upload';

               END;
               END IF;
               IF ( v_OperationFlag = 21 ) THEN

                ----REJECT
               BEGIN
                  UPDATE CollateralMgmtUpload_Mod
                     SET AuthorisationStatus = 'R',
                         ApprovedBy = v_UserLoginID,
                         DateApproved = SYSDATE
                   WHERE  UploadId = v_UniqueUploadID
                    AND AuthorisationStatus IN ( 'NP','1A' )
                  ;
                  UPDATE CollateralMgmtUpload_Mod
                     SET AuthorisationStatus = 'R',
                         ApprovedBy = v_UserLoginID,
                         DateApproved = SYSDATE
                   WHERE  UploadId = v_UniqueUploadID
                    AND AuthorisationStatus IN ( 'NP','1A' )
                  ;
                  ----SELECT * FROM IBPCPoolDetail
                  UPDATE ExcelUploadHistory
                     SET AuthorisationStatus = 'R',
                         ApprovedBy = v_UserLoginID,
                         DateApproved = SYSDATE
                   WHERE  EffectiveFromTimeKey <= v_Timekey
                    AND EffectiveToTimeKey >= v_Timekey
                    AND UniqueUploadID = v_UniqueUploadID
                    AND UploadType = 'Colletral Upload';

               END;
               END IF;

            END;
            END IF;
            -------------------------------------Attendance Log----------------------------	
            IF v_OperationFlag IN ( 1,2,3,16,17,18,20,21 )

              AND v_AuthMode = 'Y' THEN
             DECLARE
               v_DateCreated1 DATE;

            BEGIN
               DBMS_OUTPUT.PUT_LINE('log table');
               v_DateCreated1 := SYSDATE ;
               --declare @ReferenceID1 varchar(max)
               --set @ReferenceID1 = (case when @OperationFlag in (16,20,21) then @SourceAlt_Key else @SourceAlt_Key end)
               IF v_OperationFlag IN ( 16,17,18,20,21 )
                THEN

               BEGIN
                  DBMS_OUTPUT.PUT_LINE('Authorised');
                  utils.var_number :=LogDetailsInsertUpdate_Attendence -- MAINTAIN LOG TABLE
                  (v_BranchCode => ' ' ----BranchCode
                   ,
                   v_MenuID => v_MenuID,
                   v_ReferenceID => v_UniqueUploadID -- ReferenceID ,
                   ,
                   v_CreatedBy => NULL,
                   v_ApprovedBy => v_UserLoginID,
                   iv_CreatedCheckedDt => v_DateCreated1,
                   v_Remark => NULL,
                   v_ScreenEntityAlt_Key => 16 ---ScreenEntityId -- for FXT060 screen
                   ,
                   v_Flag => v_OperationFlag,
                   v_AuthMode => v_AuthMode) ;

               END;
               ELSE

               BEGIN
                  DBMS_OUTPUT.PUT_LINE('UNAuthorised');
                  -- Declare
                  -- set @CreatedBy  =@UserLoginID
                  utils.var_number :=LogDetailsInsertUpdate_Attendence -- MAINTAIN LOG TABLE
                  (v_BranchCode => ' ' ----BranchCode
                   ,
                   v_MenuID => v_MenuID,
                   v_ReferenceID => v_UniqueUploadID -- ReferenceID ,
                   ,
                   v_CreatedBy => v_UserLoginID,
                   v_ApprovedBy => NULL,
                   iv_CreatedCheckedDt => v_DateCreated1,
                   v_Remark => NULL,
                   v_ScreenEntityAlt_Key => 16 ---ScreenEntityId -- for FXT060 screen
                   ,
                   v_Flag => v_OperationFlag,
                   v_AuthMode => v_AuthMode) ;

               END;
               END IF;

            END;
            END IF;
            ---------------------------------------------------------------------------------------
            --COMMIT TRAN
            ---SET @Result=CASE WHEN  @OperationFlag=1 THEN @UniqueUploadID ELSE 1 END
            v_Result := CASE 
                             WHEN v_OperationFlag = 1
                               AND v_MenuId = 24702 THEN v_ExcelUploadId
            ELSE 1
               END ;
            UPDATE UploadStatus
               SET InsertionOfData = 'Y',
                   InsertionCompletedOn = SYSDATE
             WHERE  FileNames = v_filepath;
            BEGIN
               SELECT 1 INTO v_temp
                 FROM DUAL
                WHERE EXISTS ( SELECT 1 
                               FROM CollateralDetails_stg 
                                WHERE  filname = v_FilePathUpload );
            EXCEPTION
               WHEN OTHERS THEN
                  NULL;
            END;

            IF v_temp = 1 THEN

            BEGIN
               DELETE CollateralDetails_stg

                WHERE  filname = v_FilePathUpload;
               DBMS_OUTPUT.PUT_LINE(1);

            END;
            END IF;
            ----	 PRINT 'ROWS DELETED FROM IBPCPoolDetail_stg'+CAST(@@ROWCOUNT AS VARCHAR(100))
            RETURN v_Result;

         END;
      EXCEPTION
         WHEN OTHERS THEN

      BEGIN
         ------RETURN @UniqueUploadID
         --ROLLBACK TRAN
         OPEN  v_cursor FOR
            SELECT SQLERRM ,
                   utils.error_line 
              FROM DUAL  ;
            DBMS_SQL.RETURN_RESULT(v_cursor);
         v_Result := -1 ;
         UPDATE UploadStatus
            SET InsertionOfData = 'Y',
                InsertionCompletedOn = SYSDATE
          WHERE  FileNames = v_filepath;
         RETURN -1;

      END;END;

   END;
   END IF;

EXCEPTION WHEN OTHERS THEN utils.handleerror(SQLCODE,SQLERRM);
END;

/

  GRANT EXECUTE ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_24012024" TO "ROLE_LOCAL_RBL_MISDB_PROD_ORACLE";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_24012024" TO "PREMOC_RBL_MISDB_PROD";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_24012024" TO "QPI_RBL_MISDB_PROD";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_24012024" TO "ALERT_RBL_MISDB_PROD";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_24012024" TO "DWH_RBL_MISDB_PROD";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_24012024" TO "MAIN_PRO";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_24012024" TO "D2KMNTR_RBL_MISDB_PROD";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_24012024" TO "CURDAT_RBL_MISDB_PROD";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_24012024" TO "BS_RBL_MISDB_PROD";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_24012024" TO "ACL_RBL_MISDB_PROD";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_24012024" TO "ETL_MAIN_RBL_MISDB_PROD";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_24012024" TO "DATAUPLOAD_RBL_MISDB_PROD";
  GRANT DEBUG ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_24012024" TO "ROLE_LOCAL_RBL_MISDB_PROD_ORACLE";
  GRANT DEBUG ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_24012024" TO "PREMOC_RBL_MISDB_PROD";
  GRANT DEBUG ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_24012024" TO "QPI_RBL_MISDB_PROD";
  GRANT DEBUG ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_24012024" TO "ALERT_RBL_MISDB_PROD";
  GRANT DEBUG ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_24012024" TO "DWH_RBL_MISDB_PROD";
  GRANT DEBUG ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_24012024" TO "MAIN_PRO";
  GRANT DEBUG ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_24012024" TO "D2KMNTR_RBL_MISDB_PROD";
  GRANT DEBUG ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_24012024" TO "CURDAT_RBL_MISDB_PROD";
  GRANT DEBUG ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_24012024" TO "BS_RBL_MISDB_PROD";
  GRANT DEBUG ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_24012024" TO "ACL_RBL_MISDB_PROD";
  GRANT DEBUG ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_24012024" TO "ETL_MAIN_RBL_MISDB_PROD";
  GRANT DEBUG ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_24012024" TO "DATAUPLOAD_RBL_MISDB_PROD";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_24012024" TO "ROLE_ALL_DB";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_24012024" TO "CC_CDR_RBL_STGDB";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_24012024" TO "RBL_BI_RBL_STGDB";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_24012024" TO "BSG_READ_RBL_STGDB";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_24012024" TO "STD_FIN_RBL_STGDB";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_24012024" TO "RBL_STGDB";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_24012024" TO "ETL_TEMP_RBL_TEMPDB";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_24012024" TO "RBL_TEMPDB";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_24012024" TO "STG_FIN_RBL_STGDB";
  GRANT EXECUTE ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_24012024" TO "ADF_CDR_RBL_STGDB";
  GRANT DEBUG ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_24012024" TO "ROLE_ALL_DB";
  GRANT DEBUG ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_24012024" TO "CC_CDR_RBL_STGDB";
  GRANT DEBUG ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_24012024" TO "RBL_BI_RBL_STGDB";
  GRANT DEBUG ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_24012024" TO "BSG_READ_RBL_STGDB";
  GRANT DEBUG ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_24012024" TO "STD_FIN_RBL_STGDB";
  GRANT DEBUG ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_24012024" TO "RBL_STGDB";
  GRANT DEBUG ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_24012024" TO "ETL_TEMP_RBL_TEMPDB";
  GRANT DEBUG ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_24012024" TO "RBL_TEMPDB";
  GRANT DEBUG ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_24012024" TO "STG_FIN_RBL_STGDB";
  GRANT DEBUG ON "RBL_MISDB_PROD"."COLLETRALUPLOADDATAINUP_24012024" TO "ADF_CDR_RBL_STGDB";
